#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 6.2
#  in conjunction with Tcl version 8.6
#    Apr 01, 2022 01:56:46 AM WAT  platform: Windows NT

import sys

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

from PIL import Image, ImageTk

from tkinter import *
import Horizonbank_support
import os.path
from datetime import datetime
import mysql.connector
import random
import bcrypt
from tkinter import messagebox
import shelve
import smtplib
from email.message import EmailMessage
from email.mime.multipart import MIMEMultipart
from email.mime.text import  MIMEText
import ssl
import yagmail
from tkhtmlview import HTMLLabel

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    global prog_location
    prog_call = sys.argv[0]
    prog_location = os.path.split(prog_call)[0]
    root = tk.Tk()
    top = Application (root)
    Horizonbank_support.init(root, top)
    root.mainloop()

w = None
def create_Application(rt, *args, **kwargs):
    '''Starting point when module is imported by another module.
       Correct form of call: 'create_Application(root, *args, **kwargs)' .'''
    global w, w_win, root
    global prog_location
    prog_call = sys.argv[0]
    prog_location = os.path.split(prog_call)[0]
    #rt = root
    root = rt
    w = tk.Toplevel (root)
    top = Application (w)
    Horizonbank_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_Application():
    global w
    w.destroy()
    w = None

class Application:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'

        top.geometry("420x650+512+3")
        top.minsize(120, 1)
        top.maxsize(1370, 749)
        top.resizable(1,  1)
        top.title("HorizonBank")
        top.configure(background="#d9d9d9")
        top.configure(cursor="arrow")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")

        # CREATE DATABASE CONNECTION
        self.conn = mysql.connector.connect(host="", database="virtualdeskdb", user="root", password="")
        self.cursor = self.conn.cursor()


        #HOME SCREEN
        self.Home_screen = tk.Frame(top)
        self.Home_screen.place(relx=0.0, rely=0.0, relheight=1.0
                , relwidth=1.0)
        self.Home_screen.configure(relief='groove')
        self.Home_screen.configure(borderwidth="2")
        self.Home_screen.configure(relief="groove")
        self.Home_screen.configure(background="#68b3ea")
        self.Home_screen.configure(cursor="arrow")
        self.Home_screen.configure(highlightbackground="#d9d9d9")
        self.Home_screen.configure(highlightcolor="black")

        self.background_image_label = tk.Label(self.Home_screen)
        self.background_image_label.place(relx=0.0, rely=0.0, height=650
                , width=420)
        self.background_image_label.configure(activebackground="#f9f9f9")
        self.background_image_label.configure(activeforeground="black")
        self.background_image_label.configure(background="#d9d9d9")
        self.background_image_label.configure(disabledforeground="#a3a3a3")
        self.background_image_label.configure(foreground="#000000")
        self.background_image_label.configure(highlightbackground="#d9d9d9")
        self.background_image_label.configure(highlightcolor="black")
        photo_location = os.path.join(prog_location,"images/washington.png")
        global _img0
        _img0 = tk.PhotoImage(file=photo_location)
        self.background_image_label.configure(image=_img0)
        self.background_image_label.configure(text='''Label''')


        #LOGIN (SIGN IN)
        self.Log_in_button = tk.Button(self.Home_screen, command=lambda: self.show_frame(self.Login_screen))
        # self.Log_in_button = tk.Button(self.Home_screen)
        self.Log_in_button.place(relx=0.333, rely=0.800, height=34, width=117)
        self.Log_in_button.configure(activebackground="#f9f9f9")
        self.Log_in_button.configure(activeforeground="black")
        self.Log_in_button.configure(background="#ffffff")
        self.Log_in_button.configure(cursor="arrow")
        self.Log_in_button.configure(font="-family {Verdana} -size 10 -weight bold")
        self.Log_in_button.configure(disabledforeground="#a3a3a3")
        self.Log_in_button.configure(foreground="#000000")
        self.Log_in_button.configure(highlightbackground="#d9d9d9")
        self.Log_in_button.configure(highlightcolor="black")
        self.Log_in_button.configure(pady="0")
        self.Log_in_button.configure(text='''Log In''')


        #GET STARTED (SIGN UP) BUTTON
        self.Get_Started_Button = tk.Button(self.Home_screen,
                                            command=lambda: self.show_frame(self.signup_type_frame))
        # self.Get_Started_Button = tk.Button(self.Home_screen)
        self.Get_Started_Button.place(relx=0.262, rely=0.858, height=34
                , width=177)
        self.Get_Started_Button.configure(activebackground="#f9f9f9")
        self.Get_Started_Button.configure(activeforeground="black")
        self.Get_Started_Button.configure(background="#ffffff")
        self.Get_Started_Button.configure(cursor="arrow")
        self.Get_Started_Button.configure(font="-family {Verdana} -size 10 -weight bold")
        self.Get_Started_Button.configure(disabledforeground="#a3a3a3")
        self.Get_Started_Button.configure(foreground="#000000")
        self.Get_Started_Button.configure(highlightbackground="#d9d9d9")
        self.Get_Started_Button.configure(highlightcolor="black")
        self.Get_Started_Button.configure(pady="0")
        self.Get_Started_Button.configure(text='''Get Started''')


        #====================================================
        #CONTACT LABEL
        self.Contact = tk.Label(self.Home_screen)
        self.Contact.place(relx=0.024, rely=0.954, height=21, width=110)
        self.Contact.configure(activebackground="#f9f9f9")
        self.Contact.configure(activeforeground="black")
        self.Contact.configure(background="#ffffff")
        self.Contact.configure(cursor="arrow")
        self.Contact.configure(disabledforeground="#a3a3a3")
        self.Contact.configure(foreground="#000000")
        self.Contact.configure(highlightbackground="#d9d9d9")
        self.Contact.configure(highlightcolor="black")
        self.Contact.configure(text='''Contact Us''')
        self.Contact.bind('<Button-1>', lambda e: self.show_frame(self.contact_screen))
        self.Contact.configure(font="-family {Verdana} -size 10 -weight bold")

        #==========================================
        #HELP LABEL
        self.Help = tk.Label(self.Home_screen)
        self.Help.place(relx=0.69, rely=0.954, height=20, width=110)
        self.Help.configure(activebackground="#f9f9f9")
        self.Help.configure(activeforeground="black")
        self.Help.configure(background="#ffffff")
        self.Help.configure(cursor="arrow")
        self.Help.configure(disabledforeground="#a3a3a3")
        self.Help.configure(foreground="#000000")
        self.Help.configure(highlightbackground="#ffffff")
        self.Help.configure(highlightcolor="black")
        self.Help.configure(text='''Help?''')
        self.Help.bind('<Button-1>', lambda e: self.show_frame(self.Help_screen))
        self.Help.configure(font="-family {Verdana} -size 10 -weight bold")


        #======================================
        #ABOUT LABEL
        self.About = tk.Label(self.Home_screen)
        self.About.place(relx=0.357, rely=0.954, height=20, width=110)
        self.About.configure(activebackground="#f9f9f9")
        self.About.configure(activeforeground="black")
        self.About.configure(background="#ffffff")
        self.About.configure(cursor="arrow")
        self.About.configure(disabledforeground="#a3a3a3")
        self.About.configure(foreground="#000000")
        self.About.configure(highlightbackground="#d9d9d9")
        self.About.configure(highlightcolor="black")
        self.About.configure(text='''About Us''')
        self.About.bind('<Button-1>', lambda e: self.show_frame(self.About_screen))
        self.About.configure(font="-family {Verdana} -size 10 -weight bold")

        #==============================================================
        #LOG IN (SIGN IN) FRAME SCREEN
        self.Login_screen = tk.Frame(top)
        self.Login_screen.place(relx=0.0, rely=0.0, relheight=1.0
                , relwidth=1.0)
        self.Login_screen.configure(relief='groove')
        self.Login_screen.configure(borderwidth="2")
        self.Login_screen.configure(relief="groove")
        self.Login_screen.configure(background="#d9d9d9")
        self.Login_screen.configure(highlightbackground="#d9d9d9")
        self.Login_screen.configure(highlightcolor="black")

        self.login_labelframe = tk.LabelFrame(self.Login_screen)
        self.login_labelframe.place(relx=0.143, rely=0.169, relheight=0.545
                , relwidth=0.69)
        self.login_labelframe.configure(relief='groove')
        self.login_labelframe.configure(foreground="black")
        self.login_labelframe.configure(text='''Log In''')
        self.login_labelframe.configure(background="#d9d9d9")
        self.login_labelframe.configure(highlightbackground="#d9d9d9")
        self.login_labelframe.configure(highlightcolor="black")

        self.login_email_label = tk.Label(self.login_labelframe)
        self.login_email_label.place(relx=0.034, rely=0.254, height=21, width=64
                , bordermode='ignore')
        self.login_email_label.configure(activebackground="#f9f9f9")
        self.login_email_label.configure(activeforeground="black")
        self.login_email_label.configure(background="#d9d9d9")
        self.login_email_label.configure(disabledforeground="#a3a3a3")
        self.login_email_label.configure(foreground="#000000")
        self.login_email_label.configure(highlightbackground="#d9d9d9")
        self.login_email_label.configure(highlightcolor="black")
        self.login_email_label.configure(text='''E-mail''')

        self.login_email_entry = tk.Entry(self.login_labelframe)
        self.login_email_entry.place(relx=0.31, rely=0.254, height=20
                , relwidth=0.428, bordermode='ignore')
        self.login_email_entry.configure(background="white")
        self.login_email_entry.configure(disabledforeground="#a3a3a3")
        self.login_email_entry.configure(font="TkFixedFont")
        self.login_email_entry.configure(foreground="#000000")
        self.login_email_entry.configure(highlightbackground="#d9d9d9")
        self.login_email_entry.configure(highlightcolor="black")
        self.login_email_entry.configure(insertbackground="black")
        self.login_email_entry.configure(selectbackground="blue")
        self.login_email_entry.configure(selectforeground="white")

        self.login_password_label = tk.Label(self.login_labelframe)
        self.login_password_label.place(relx=0.034, rely=0.395, height=21
                , width=64, bordermode='ignore')
        self.login_password_label.configure(activebackground="#f9f9f9")
        self.login_password_label.configure(activeforeground="black")
        self.login_password_label.configure(background="#d9d9d9")
        self.login_password_label.configure(disabledforeground="#a3a3a3")
        self.login_password_label.configure(foreground="#000000")
        self.login_password_label.configure(highlightbackground="#d9d9d9")
        self.login_password_label.configure(highlightcolor="black")
        self.login_password_label.configure(text='''Password''')

        self.login_password_entry = tk.Entry(self.login_labelframe, show='****')
        self.login_password_entry.place(relx=0.31, rely=0.395, height=20
                , relwidth=0.428, bordermode='ignore')
        self.login_password_entry.configure(background="white")
        self.login_password_entry.configure(disabledforeground="#a3a3a3")
        self.login_password_entry.configure(font="TkFixedFont")
        self.login_password_entry.configure(foreground="#000000")
        self.login_password_entry.configure(highlightbackground="#d9d9d9")
        self.login_password_entry.configure(highlightcolor="black")
        self.login_password_entry.configure(insertbackground="black")
        self.login_password_entry.configure(selectbackground="blue")
        self.login_password_entry.configure(selectforeground="white")

        self.forgetpass_Button = tk.Button(self.Login_screen,
                                           command=lambda: self.show_frame(self.forgetpassword_Frame))
        self.forgetpass_Button.place(relx=0.31, rely=0.450, height=53, width=150
                                     , bordermode='ignore')
        self.forgetpass_Button.configure(activebackground="#f9f9f9")
        self.forgetpass_Button.configure(activeforeground="black")
        self.forgetpass_Button.configure(background="#d9d9d9")
        self.forgetpass_Button.configure(borderwidth="0")
        self.forgetpass_Button.configure(disabledforeground="#a3a3a3")
        self.forgetpass_Button.configure(foreground="#68b3ea")
        self.forgetpass_Button.configure(highlightbackground="#d9d9d9")
        self.forgetpass_Button.configure(highlightcolor="black")
        self.forgetpass_Button.configure(pady="0")
        self.forgetpass_Button.configure(relief="groove")
        self.forgetpass_Button.configure(font="-family {Verdana} -size 10 -weight bold")
        self.forgetpass_Button.configure(text='''Forgot Password?''')


        self.login_signin_button = tk.Button(self.login_labelframe, command = self.authenticate)
        self.login_signin_button.place(relx=0.31, rely=0.817, height=34
                , width=117, bordermode='ignore')
        self.login_signin_button.configure(activebackground="#ececec")
        self.login_signin_button.configure(activeforeground="#000000")
        self.login_signin_button.configure(background="#68b3ea")
        self.login_signin_button.configure(disabledforeground="#a3a3a3")
        self.login_signin_button.configure(foreground="#000000")
        self.login_signin_button.configure(highlightbackground="#d9d9d9")
        self.login_signin_button.configure(highlightcolor="black")
        self.login_signin_button.configure(pady="0")
        self.login_signin_button.configure(text='''Sign In''')

        self.back_button = tk.Button(self.Login_screen, command=lambda: self.show_frame(self.Home_screen))
        self.back_button.place(x=20, y=20, width=40, height=20)
        self.back_button.configure(text='''Back''')
        self.back_button.configure(font="-family {Verdana} -size 10 -weight bold")


        #============================================================
        #FORGET PASSWORD FRAME

        self.forgetpassword_Frame = tk.Frame(top)
        self.forgetpassword_Frame.place(relx=0.0, rely=0.0, relheight=1.0
                                        , relwidth=1.0)
        self.forgetpassword_Frame.configure(relief='groove')
        self.forgetpassword_Frame.configure(borderwidth="2")
        self.forgetpassword_Frame.configure(relief="groove")
        self.forgetpassword_Frame.configure(background="#ffffff")

        self.emailforgetLabel = tk.Label(self.forgetpassword_Frame)
        self.emailforgetLabel.place(relx=0.170, rely=0.170, height=66, width=152)
        self.emailforgetLabel.configure(activebackground="#f9f9f9")
        self.emailforgetLabel.configure(activeforeground="black")
        self.emailforgetLabel.configure(background="#ffffff")
        self.emailforgetLabel.configure(disabledforeground="#a3a3a3")
        self.emailforgetLabel.configure(font="-family {Georgia} -size 13 -weight bold")
        self.emailforgetLabel.configure(foreground="#000075")
        self.emailforgetLabel.configure(highlightbackground="#d9d9d9")
        self.emailforgetLabel.configure(highlightcolor = "black")
        self.emailforgetLabel.configure(text='''Email :''')

        self.emailforget_Entry1 = tk.Entry(self.forgetpassword_Frame)
        self.emailforget_Entry1.place(relx=0.470, rely=0.200, height=24, relwidth=0.407)
        self.emailforget_Entry1.configure(background="white")
        self.emailforget_Entry1.configure(disabledforeground="#a3a3a3")
        self.emailforget_Entry1.configure(font="TkFixedFont")
        self.emailforget_Entry1.configure(foreground="#000000")
        self.emailforget_Entry1.configure(insertbackground="black")
        self.emailforget_Entry1.configure(selectbackground="blue")
        self.emailforget_Entry1.configure(selectforeground="white")


        self.newpassword_Label_1 = tk.Label(self.forgetpassword_Frame)
        self.newpassword_Label_1.place(relx=0.000, rely=0.250, height=66
                                       , width=222)
        self.newpassword_Label_1.configure(activebackground="#f9f9f9")
        self.newpassword_Label_1.configure(activeforeground="black")
        self.newpassword_Label_1.configure(background="#ffffff")
        self.newpassword_Label_1.configure(disabledforeground="#a3a3a3")
        self.newpassword_Label_1.configure(font="-family {Georgia} -size 13 -weight bold")
        self.newpassword_Label_1.configure(foreground="#000075")
        self.newpassword_Label_1.configure(highlightbackground="#d9d9d9")
        self.newpassword_Label_1.configure(highlightcolor="black")
        self.newpassword_Label_1.configure(text='''New password :''')

        self.newpass_Entry = tk.Entry(self.forgetpassword_Frame)
        self.newpass_Entry.place(relx=0.470, rely=0.285, height=24, relwidth=0.407)
        self.newpass_Entry.configure(background="white")
        self.newpass_Entry.configure(disabledforeground="#a3a3a3")
        self.newpass_Entry.configure(font="TkFixedFont")
        self.newpass_Entry.configure(foreground="#000000")
        self.newpass_Entry.configure(highlightbackground="#d9d9d9")
        self.newpass_Entry.configure(highlightcolor="black")
        self.newpass_Entry.configure(insertbackground="black")
        self.newpass_Entry.configure(selectbackground="blue")
        self.newpass_Entry.configure(selectforeground="white")

        self.conpassword_Label = tk.Label(self.forgetpassword_Frame)
        self.conpassword_Label.place(relx=-0.10, rely=0.330, height=66, width=272)
        self.conpassword_Label.configure(activebackground="#f9f9f9")
        self.conpassword_Label.configure(activeforeground="black")
        self.conpassword_Label.configure(background="#ffffff")
        self.conpassword_Label.configure(disabledforeground="#a3a3a3")
        self.conpassword_Label.configure(font="-family {Georgia} -size 13 -weight bold")
        self.conpassword_Label.configure(foreground="#000075")
        self.conpassword_Label.configure(highlightbackground="#d9d9d9")
        self.conpassword_Label.configure(highlightcolor="black")
        self.conpassword_Label.configure(text='''Confirm Password :''')

        self.conpass_Entry = tk.Entry(self.forgetpassword_Frame)
        self.conpass_Entry.place(relx=0.470, rely=0.360, height=24, relwidth=0.407)
        self.conpass_Entry.configure(background="white")
        self.conpass_Entry.configure(disabledforeground="#a3a3a3")
        self.conpass_Entry.configure(font="TkFixedFont")
        self.conpass_Entry.configure(foreground="#000000")
        self.conpass_Entry.configure(highlightbackground="#d9d9d9")
        self.conpass_Entry.configure(highlightcolor="black")
        self.conpass_Entry.configure(insertbackground="black")
        self.conpass_Entry.configure(selectbackground="blue")
        self.conpass_Entry.configure(selectforeground="white")

        self.changepass_Button = tk.Button(self.forgetpassword_Frame, command=self.forgotpassword)
        self.changepass_Button.place(relx=0.150, rely=0.650, height=73
                                     , width=216)
        self.changepass_Button.configure(activebackground="#ececec")
        self.changepass_Button.configure(activeforeground="#000000")
        self.changepass_Button.configure(background="#000075")
        self.changepass_Button.configure(borderwidth="0")
        self.changepass_Button.configure(disabledforeground="#a3a3a3")
        self.changepass_Button.configure(font="-family {Georgia} -size 12 -weight bold")
        self.changepass_Button.configure(foreground="#ffffff")
        self.changepass_Button.configure(highlightbackground="#d9d9d9")
        self.changepass_Button.configure(highlightcolor="black")
        self.changepass_Button.configure(pady="0")
        self.changepass_Button.configure(text='''Change Password''')

        self.forgetpassword_Frame_back_button = tk.Button(self.forgetpassword_Frame, command=lambda: self.show_frame(self.Home_screen))
        self.forgetpassword_Frame_back_button.place(x=20, y=20, width=40, height=20)
        self.forgetpassword_Frame_back_button.configure(text='''Back''')
        self.forgetpassword_Frame_back_button.configure(font="-family {Verdana} -size 10 -weight bold")


        #=============================================================

        #GET STARTED (SIGN UP) FRAME SCREEN(EXISTING USER)
        self.getstarted_screen = tk.Frame(top)
        self.getstarted_screen.place(relx=0.0, rely=0.0, relheight=1.0
                , relwidth=1.0)
        self.getstarted_screen.configure(relief='groove')
        self.getstarted_screen.configure(borderwidth="2")
        self.getstarted_screen.configure(relief="groove")
        self.getstarted_screen.configure(background="#d9d9d9")
        self.getstarted_screen.configure(highlightbackground="#d9d9d9")
        self.getstarted_screen.configure(highlightcolor="black")

        self.signup_labelframe = tk.LabelFrame(self.getstarted_screen)
        self.signup_labelframe.place(relx=0.147, rely=0.169, relheight=0.545
                , relwidth=0.692)
        self.signup_labelframe.configure(relief='groove')
        self.signup_labelframe.configure(foreground="black")
        self.signup_labelframe.configure(text='''Sign Up''')
        self.signup_labelframe.configure(background="#d9d9d9")
        self.signup_labelframe.configure(highlightbackground="#d9d9d9")
        self.signup_labelframe.configure(highlightcolor="black")

        self.signup_account_number_label_1 = tk.Label(self.signup_labelframe)
        self.signup_account_number_label_1.place(relx=0.035, rely=0.289, height=31
                , width=94, bordermode='ignore')
        self.signup_account_number_label_1.configure(activebackground="#f9f9f9")
        self.signup_account_number_label_1.configure(activeforeground="black")
        self.signup_account_number_label_1.configure(background="#d9d9d9")
        self.signup_account_number_label_1.configure(disabledforeground="#a3a3a3")
        self.signup_account_number_label_1.configure(foreground="#000000")
        self.signup_account_number_label_1.configure(highlightbackground="#d9d9d9")
        self.signup_account_number_label_1.configure(highlightcolor="black")
        self.signup_account_number_label_1.configure(text='''Account Number''')

        self.signup_account_number_entry = tk.Entry(self.signup_labelframe)
        self.signup_account_number_entry.place(relx=0.41, rely=0.289, height=30
                , relwidth=0.481, bordermode='ignore')
        self.signup_account_number_entry.configure(background="white")
        self.signup_account_number_entry.configure(disabledforeground="#a3a3a3")
        self.signup_account_number_entry.configure(font="TkFixedFont")
        self.signup_account_number_entry.configure(foreground="#000000")
        self.signup_account_number_entry.configure(highlightbackground="#d9d9d9")
        self.signup_account_number_entry.configure(highlightcolor="black")
        self.signup_account_number_entry.configure(insertbackground="black")
        self.signup_account_number_entry.configure(selectbackground="blue")
        self.signup_account_number_entry.configure(selectforeground="white")

        self.signup_password_label = tk.Label(self.signup_labelframe)
        self.signup_password_label.place(relx=0.094, rely=0.458, height=31, width= 74
                , bordermode='ignore')
        self.signup_password_label.configure(activebackground="#f9f9f9")
        self.signup_password_label.configure(activeforeground="black")
        self.signup_password_label.configure(background="#d9d9d9")
        self.signup_password_label.configure(disabledforeground="#a3a3a3")
        self.signup_password_label.configure(foreground="#000000")
        self.signup_password_label.configure(highlightbackground="#d9d9d9")
        self.signup_password_label.configure(highlightcolor="black")
        self.signup_password_label.configure(text='''Password''')

        self.signup_account_number_password_entry = tk.Entry(self.signup_labelframe, show='***')
        self.signup_account_number_password_entry.place(relx=0.41, rely=0.458
                , height=30, relwidth=0.481, bordermode='ignore')
        self.signup_account_number_password_entry.configure(background="white")
        self.signup_account_number_password_entry.configure(disabledforeground="#a3a3a3")
        self.signup_account_number_password_entry.configure(font="TkFixedFont")
        self.signup_account_number_password_entry.configure(foreground="#000000")
        self.signup_account_number_password_entry.configure(highlightbackground="#d9d9d9")
        self.signup_account_number_password_entry.configure(highlightcolor="black")
        self.signup_account_number_password_entry.configure(insertbackground="black")
        self.signup_account_number_password_entry.configure(selectbackground="blue")
        self.signup_account_number_password_entry.configure(selectforeground="white")

        self.signup_button = tk.Button(self.signup_labelframe, command=self.existing_user )
        self.signup_button.place(relx=0.375, rely=0.602, height=34, width=157
                , bordermode='ignore')
        self.signup_button.configure(activebackground="#ececec")
        self.signup_button.configure(activeforeground="#000000")
        self.signup_button.configure(background="#68b3ea")
        self.signup_button.configure(disabledforeground="#a3a3a3")
        self.signup_button.configure(foreground="#000000")
        self.signup_button.configure(highlightbackground="#d9d9d9")
        self.signup_button.configure(highlightcolor="black")
        self.signup_button.configure(pady="0")
        self.signup_button.configure(text='''Sign Up''')

        self.back_button = tk.Button(self.getstarted_screen, command=lambda: self.show_frame(self.signup_type_frame))
        self.back_button.place(x=20, y=20, width=40, height=20)
        self.back_button.configure(text='''Back''')
        self.back_button.configure(font="-family {Verdana} -size 10 -weight bold")

        #========================================
        #ACCOUNT CREATION SCREEN(NEW USER CREATION)

        self.account_registration_frame = tk.Frame(top)
        self.account_registration_frame.place(relx=0.0, rely=0.0, relheight=1.0
                                              , relwidth=1.0)
        self.account_registration_frame.configure(relief='groove')
        self.account_registration_frame.configure(borderwidth="2")
        self.account_registration_frame.configure(relief="groove")
        self.account_registration_frame.configure(background="#0080c0")

        self.account_registration_screen = tk.LabelFrame(self.account_registration_frame)
        self.account_registration_screen.place(relx=0.071, rely=0.077
                                               , relheight=0.854, relwidth=0.857)
        self.account_registration_screen.configure(relief='groove')
        self.account_registration_screen.configure(foreground="black")
        self.account_registration_screen.configure(text='''User Account Creation''')
        self.account_registration_screen.configure(background="#d9d9d9")

        self.title_label = tk.Label(self.account_registration_screen)
        self.title_label.place(relx=0.028, rely=0.09, height=21, width=74
                               , bordermode='ignore')
        self.title_label.configure(anchor='w')
        self.title_label.configure(background="#d9d9d9")
        self.title_label.configure(disabledforeground="#a3a3a3")
        self.title_label.configure(foreground="#000000")
        self.title_label.configure(text='''Title''')

        self.t = tk.StringVar()
        self.title_TCombobox = ttk.Combobox(self.account_registration_screen)
        self.title_TCombobox['values'] = ("Mrs", "Mr", "Miss")
        self.title_TCombobox.place(relx=0.167, rely=0.09, relheight=0.038
                                   , relwidth=0.119, bordermode='ignore')
        self.title_TCombobox
        self.title_TCombobox.configure()
        self.title_TCombobox.configure(takefocus="")

        self.firstname_creation_label = ttk.Label(self.account_registration_screen)
        self.firstname_creation_label.place(relx=0.417, rely=0.09, height=29
                                            , width=105, bordermode='ignore')
        self.firstname_creation_label.configure(background="#d9d9d9")
        self.firstname_creation_label.configure(foreground="#000000")
        self.firstname_creation_label.configure(font="TkDefaultFont")
        self.firstname_creation_label.configure(relief="flat")
        self.firstname_creation_label.configure(anchor='w')
        self.firstname_creation_label.configure(justify='left')
        self.firstname_creation_label.configure(text='''First Name''')

        self.firstname_Entry = tk.Entry(self.account_registration_screen)
        # self.firstname_Entry.place(relx=0.222, rely=0.18, height=20, relwidth=0.233
        #                             , bordermode='ignore')
        self.firstname_Entry.place(relx=0.667, rely=0.09, relheight=0.038, relwidth=0.267
                           , bordermode='ignore')
        self.firstname_Entry.configure(background="white")
        self.firstname_Entry.configure(disabledforeground="#a3a3a3")
        self.firstname_Entry.configure(font="TkFixedFont")
        self.firstname_Entry.configure(foreground="#000000")
        self.firstname_Entry.configure(insertbackground="black")


        self.lastname_creation_label = tk.Label(self.account_registration_screen)
        self.lastname_creation_label.place(relx=0.028, rely=0.18, height=21
                , width=74, bordermode='ignore')
        self.lastname_creation_label.configure(anchor='w')
        self.lastname_creation_label.configure(background="#d9d9d9")
        self.lastname_creation_label.configure(disabledforeground="#a3a3a3")
        self.lastname_creation_label.configure(foreground="#000000")
        self.lastname_creation_label.configure(text='''Last Name''')

        self.lastname_creation_Entry = tk.Entry(self.account_registration_screen)
        self.lastname_creation_Entry.place(relx=0.222, rely=0.18, height=20, relwidth=0.233
                , bordermode='ignore')
        self.lastname_creation_Entry.configure(background="white")
        self.lastname_creation_Entry.configure(disabledforeground="#a3a3a3")
        self.lastname_creation_Entry.configure(font="TkFixedFont")
        self.lastname_creation_Entry.configure(foreground="#000000")
        self.lastname_creation_Entry.configure(insertbackground="black")


        self.othername_creation_label = tk.Label(self.account_registration_screen)
        self.othername_creation_label.place(relx=0.417, rely=0.18, height=21
                                            , width=84, bordermode='ignore')
        self.othername_creation_label.configure(background="#d9d9d9")
        self.othername_creation_label.configure(disabledforeground="#a3a3a3")
        self.othername_creation_label.configure(foreground="#000000")
        self.othername_creation_label.configure(text='''Other Name''')

        self.othername_cretion_Entry = tk.Entry(self.account_registration_screen)
        self.othername_cretion_Entry.place(relx=0.667, rely=0.18, height=20, relwidth=0.261
                          , bordermode='ignore')
        self.othername_cretion_Entry.configure(background="white")
        self.othername_cretion_Entry.configure(disabledforeground="#a3a3a3")
        self.othername_cretion_Entry.configure(font="TkFixedFont")
        self.othername_cretion_Entry.configure(foreground="#000000")
        self.othername_cretion_Entry.configure(insertbackground="black")

        self.gender_creation = tk.Label(self.account_registration_screen)
        self.gender_creation.place(relx=0.028, rely=0.27, height=21, width=74
                                   , bordermode='ignore')
        self.gender_creation.configure(background="#d9d9d9")
        self.gender_creation.configure(disabledforeground="#a3a3a3")
        self.gender_creation.configure(foreground="#000000")
        self.gender_creation.configure(text='''Gender''')

        self.g = tk.StringVar
        self.gender_TCombobox = ttk.Combobox(self.account_registration_screen)
        self.gender_TCombobox['values'] = ("Male", "Female", "Other")
        self.gender_TCombobox.place(relx=0.222, rely=0.27, relheight=0.038
                              , relwidth=0.175, bordermode='ignore')
        self.gender_TCombobox.configure()
        self.gender_TCombobox.configure(takefocus="")

        self.dob_creation_label = tk.Label(self.account_registration_screen)
        self.dob_creation_label.place(relx=0.417, rely=0.27, height=21, width=34
                                      , bordermode='ignore')
        self.dob_creation_label.configure(background="#d9d9d9")
        self.dob_creation_label.configure(disabledforeground="#a3a3a3")
        self.dob_creation_label.configure(foreground="#000000")
        self.dob_creation_label.configure(text='''D.O.B''')

        # GET THE YEAR
        self.y = tk.StringVar()
        self.ddate = datetime.today()
        self.year = self.ddate.year
        self.yy = []
        for i in range(1970, self.year + 1):
            self.yy.append(i)

        self.user_dob_year = ttk.Combobox(self.account_registration_screen)
        self.user_dob_year.place(relx=0.806, rely=0.27, relheight=0.038
                                 , relwidth=0.147, bordermode='ignore')
        self.user_dob_year["values"] = self.yy
        self.user_dob_year.configure(textvariable=self.y)
        self.user_dob_year.configure(takefocus="")


        # GET THE MONTH
        self.m = tk.StringVar()
        self.user_dob_month = ttk.Combobox(self.account_registration_screen)
        self.user_dob_month['values'] = (1,2,3,4,5,6,7,8,9,10,11,12)
        self.user_dob_month.place(relx=0.667, rely=0.27, relheight=0.038
                              , relwidth=0.119, bordermode='ignore')
        self.user_dob_month.configure()
        self.user_dob_month.configure(takefocus="")

        # GET THE DAY
        self.dd = []
        for i in range(1, 32):
            self.dd.append(i)

        self.d = tk.StringVar()
        self.user_dob_day = ttk.Combobox(self.account_registration_screen)
        self.user_dob_day['values'] = self.dd
        self.user_dob_day.place(relx=0.528, rely=0.27, relheight=0.038
                                , relwidth=0.119, bordermode='ignore')
        self.user_dob_day.configure()
        self.user_dob_day.configure(takefocus="")

        self.password_creation_label = tk.Label(self.account_registration_screen)
        self.password_creation_label.place(relx=0.028, rely=0.36, height=21
                                           , width=74, bordermode='ignore')
        self.password_creation_label.configure(background="#d9d9d9")
        self.password_creation_label.configure(disabledforeground="#a3a3a3")
        self.password_creation_label.configure(foreground="#000000")
        self.password_creation_label.configure(text='''Password''')

        self.password_creation_entry = tk.Entry(self.account_registration_screen, show='*****')
        self.password_creation_entry.place(relx=0.222, rely=0.36, height=20, relwidth=0.233
                          , bordermode='ignore')
        self.password_creation_entry.configure(background="white")
        self.password_creation_entry.configure(disabledforeground="#a3a3a3")
        self.password_creation_entry.configure(font="TkFixedFont")
        self.password_creation_entry.configure(foreground="#000000")
        self.password_creation_entry.configure(insertbackground="black")

        self.confirmpwd_creation_label = tk.Label(self.account_registration_screen)
        self.confirmpwd_creation_label.place(relx=0.5, rely=0.36, height=21
                                             , width=44, bordermode='ignore')
        self.confirmpwd_creation_label.configure(background="#d9d9d9")
        self.confirmpwd_creation_label.configure(disabledforeground="#a3a3a3")
        self.confirmpwd_creation_label.configure(foreground="#000000")
        self.confirmpwd_creation_label.configure(text='''Confirm''')

        self.cpwd_creation_entry = tk.Entry(self.account_registration_screen)
        self.cpwd_creation_entry.place(relx=0.667, rely=0.36, height=20, relwidth=0.233
                          , bordermode='ignore')
        self.cpwd_creation_entry.configure(background="white")
        self.cpwd_creation_entry.configure(disabledforeground="#a3a3a3")
        self.cpwd_creation_entry.configure(font="TkFixedFont")
        self.cpwd_creation_entry.configure(foreground="#000000")
        self.cpwd_creation_entry.configure(insertbackground="black")

        self.email_creation_label = tk.Label(self.account_registration_screen)
        self.email_creation_label.place(relx=0.028, rely=0.45, height=21
                                        , width=74, bordermode='ignore')
        self.email_creation_label.configure(background="#d9d9d9")
        self.email_creation_label.configure(disabledforeground="#a3a3a3")
        self.email_creation_label.configure(foreground="#000000")
        self.email_creation_label.configure(text='''Email''')

        self.email_creation_entry = tk.Entry(self.account_registration_screen)
        self.email_creation_entry.place(relx=0.222, rely=0.45, height=20, relwidth=0.233
                          , bordermode='ignore')
        self.email_creation_entry.configure(background="white")
        self.email_creation_entry.configure(disabledforeground="#a3a3a3")
        self.email_creation_entry.configure(font="TkFixedFont")
        self.email_creation_entry.configure(foreground="#000000")
        self.email_creation_entry.configure(insertbackground="black")

        self.phone_creation_label = tk.Label(self.account_registration_screen)
        self.phone_creation_label.place(relx=0.5, rely=0.45, height=21, width=34
                                        , bordermode='ignore')
        self.phone_creation_label.configure(background="#d9d9d9")
        self.phone_creation_label.configure(disabledforeground="#a3a3a3")
        self.phone_creation_label.configure(foreground="#000000")
        self.phone_creation_label.configure(text='''Phone''')

        self.phone_creation_Entry = tk.Entry(self.account_registration_screen)
        self.phone_creation_Entry.place(relx=0.667, rely=0.45, height=20, relwidth=0.233
                          , bordermode='ignore')
        self.phone_creation_Entry.configure(background="white")
        self.phone_creation_Entry.configure(disabledforeground="#a3a3a3")
        self.phone_creation_Entry.configure(font="TkFixedFont")
        self.phone_creation_Entry.configure(foreground="#000000")
        self.phone_creation_Entry.configure(insertbackground="black")

        self.state_creation_label = tk.Label(self.account_registration_screen)
        self.state_creation_label.place(relx=0.028, rely=0.541, height=21
                                        , width=74, bordermode='ignore')
        self.state_creation_label.configure(background="#d9d9d9")
        self.state_creation_label.configure(disabledforeground="#a3a3a3")
        self.state_creation_label.configure(foreground="#000000")
        self.state_creation_label.configure(text='''State''')

        self.s = tk.StringVar()
        self.state_TCombobox = ttk.Combobox(self.account_registration_screen)
        self.state_TCombobox['values'] = ("Lagos", "Ogun", "Abia")
        self.state_TCombobox.place(relx=0.222, rely=0.541, relheight=0.038
                              , relwidth=0.233, bordermode='ignore')
        self.state_TCombobox.configure()
        self.state_TCombobox.configure(takefocus="")

        self.country_creation_label = tk.Label(self.account_registration_screen)
        self.country_creation_label.place(relx=0.5, rely=0.541, height=21
                                          , width=44, bordermode='ignore')
        self.country_creation_label.configure(background="#d9d9d9")
        self.country_creation_label.configure(disabledforeground="#a3a3a3")
        self.country_creation_label.configure(foreground="#000000")
        self.country_creation_label.configure(text='''Country''')

        self.c = tk.StringVar()
        self.country_TCombobox = ttk.Combobox(self.account_registration_screen)
        self.country_TCombobox['values'] = ("Nigria", "Ghana", "South Africa")
        self.country_TCombobox.place(relx=0.667, rely=0.541, relheight=0.038
                              , relwidth=0.231, bordermode='ignore')
        self.country_TCombobox.configure()
        self.country_TCombobox.configure(takefocus="")

        self.bvn_creation_label = tk.Label(self.account_registration_screen)
        self.bvn_creation_label.place(relx=0.028, rely=0.631, height=21, width=74
                                      , bordermode='ignore')
        self.bvn_creation_label.configure(background="#d9d9d9")
        self.bvn_creation_label.configure(disabledforeground="#a3a3a3")
        self.bvn_creation_label.configure(foreground="#000000")
        self.bvn_creation_label.configure(text='''BVN''')

        self.bvn_creation_Entry = tk.Entry(self.account_registration_screen)
        self.bvn_creation_Entry.place(relx=0.222, rely=0.631, height=20, relwidth=0.233
                          , bordermode='ignore')
        self.bvn_creation_Entry.configure(background="white")
        self.bvn_creation_Entry.configure(disabledforeground="#a3a3a3")
        self.bvn_creation_Entry.configure(font="TkFixedFont")
        self.bvn_creation_Entry.configure(foreground="#000000")
        self.bvn_creation_Entry.configure(insertbackground="black")

        self.id_creation_label = tk.Label(self.account_registration_screen)
        self.id_creation_label.place(relx=0.5, rely=0.631, height=21, width=34
                                     , bordermode='ignore')
        self.id_creation_label.configure(background="#d9d9d9")
        self.id_creation_label.configure(disabledforeground="#a3a3a3")
        self.id_creation_label.configure(foreground="#000000")
        self.id_creation_label.configure(text='''ID''')

        self.id_creation_Entry = tk.Entry(self.account_registration_screen)
        self.id_creation_Entry.place(relx=0.667, rely=0.631, relheight=0.038, relwidth=0.239
                          , bordermode='ignore')
        self.id_creation_Entry.configure(background="white")
        self.id_creation_Entry.configure(disabledforeground="#a3a3a3")
        self.id_creation_Entry.configure(font="TkFixedFont")
        self.id_creation_Entry.configure(foreground="#000000")
        self.id_creation_Entry.configure(insertbackground="black")

        self.nok_creation_label = tk.Label(self.account_registration_screen)
        self.nok_creation_label.place(relx=0.028, rely=0.721, height=21, width=74
                                      , bordermode='ignore')
        self.nok_creation_label.configure(background="#d9d9d9")
        self.nok_creation_label.configure(disabledforeground="#a3a3a3")
        self.nok_creation_label.configure(foreground="#000000")
        self.nok_creation_label.configure(text='''Next  of Kin''')

        self.nok_creation_Entry = tk.Entry(self.account_registration_screen)
        self.nok_creation_Entry.place(relx=0.222, rely=0.721, relheight=0.038, relwidth=0.233
                          , bordermode='ignore')
        self.nok_creation_Entry.configure(background="white")
        self.nok_creation_Entry.configure(disabledforeground="#a3a3a3")
        self.nok_creation_Entry.configure(font="TkFixedFont")
        self.nok_creation_Entry.configure(foreground="#000000")
        self.nok_creation_Entry.configure(insertbackground="black")


        self.zipcode_creation_label = tk.Label(self.account_registration_screen)
        self.zipcode_creation_label.place(relx=0.5, rely=0.721, height=21
                                          , width=54, bordermode='ignore')
        self.zipcode_creation_label.configure(background="#d9d9d9")
        self.zipcode_creation_label.configure(disabledforeground="#a3a3a3")
        self.zipcode_creation_label.configure(foreground="#000000")
        self.zipcode_creation_label.configure(text='''Zipcode''')

        self.zipcode_entry = tk.Entry(self.account_registration_screen)
        self.zipcode_entry.place(relx=0.667, rely=0.721, relheight=0.038
                           , relwidth=0.267, bordermode='ignore')
        self.zipcode_entry.configure(background="white")
        self.zipcode_entry.configure(disabledforeground="#a3a3a3")
        self.zipcode_entry.configure(font="TkFixedFont")
        self.zipcode_entry.configure(foreground="#000000")
        self.zipcode_entry.configure(insertbackground="black")

        self.pin_creation_label = tk.Label(self.account_registration_screen)
        self.pin_creation_label.place(relx=0.030, rely=0.781, height=21
                                          , width=54, bordermode='ignore')
        self.pin_creation_label.configure(background="#d9d9d9")
        self.pin_creation_label.configure(disabledforeground="#a3a3a3")
        self.pin_creation_label.configure(foreground="#000000")
        self.pin_creation_label.configure(text='''PIN''')

        self.pin_entry = tk.Entry(self.account_registration_screen)
        self.pin_entry.place(relx=0.222, rely=0.781, relheight=0.038
                                 , relwidth=0.267, bordermode='ignore')
        self.pin_entry.configure(background="white")
        self.pin_entry.configure(disabledforeground="#a3a3a3")
        self.pin_entry.configure(font="TkFixedFont")
        self.pin_entry.configure(foreground="#000000")
        self.pin_entry.configure(insertbackground="black")


        self.create_account_button = tk.Button(self.account_registration_screen, command=self.register and self.send_email)
        self.create_account_button.place(relx=0.278, rely=0.829, height=44
                                         , width=157, bordermode='ignore')
        self.create_account_button.configure(activebackground="#ececec")
        self.create_account_button.configure(activeforeground="#000000")
        self.create_account_button.configure(background="#d9d9d9")
        self.create_account_button.configure(disabledforeground="#a3a3a3")
        self.create_account_button.configure(foreground="#000000")
        self.create_account_button.configure(highlightbackground="#d9d9d9")
        self.create_account_button.configure(highlightcolor="black")
        self.create_account_button.configure(pady="0")
        self.create_account_button.configure(text='''Create Account''')

        self.back_button = tk.Button(self.account_registration_frame, command=lambda: self.show_frame(self.signup_type_frame))
        self.back_button.place(x=20, y=20, width=40, height=20)
        self.back_button.configure(text='''Back''')
        self.back_button.configure(font="-family {Verdana} -size 10 -weight bold")


        #DASHBOARD FRAME
        self.Dashboard_frame = tk.Frame(top)
        self.Dashboard_frame.place(relx=-0.024, rely=0.0, relheight=1.015
                                   , relwidth=1.048)
        self.Dashboard_frame.configure(relief='groove')
        self.Dashboard_frame.configure(borderwidth="2")
        self.Dashboard_frame.configure(relief="groove")
        self.Dashboard_frame.configure(background="#000080")
        self.Dashboard_frame.configure(highlightbackground="#d9d9d9")
        self.Dashboard_frame.configure(highlightcolor="black")

        self.dashboard_logout_button = tk.Button(self.Dashboard_frame, command=lambda: self.show_frame(self.Home_screen))
        self.dashboard_logout_button.place(relx=0.114, rely=0.848, height=34
                                           , width=67)
        self.dashboard_logout_button.configure(activebackground="#ececec")
        self.dashboard_logout_button.configure(activeforeground="#000000")
        self.dashboard_logout_button.configure(background="#0080c0")
        self.dashboard_logout_button.configure(disabledforeground="#a3a3a3")
        self.dashboard_logout_button.configure(foreground="#ffffff")
        self.dashboard_logout_button.configure(highlightbackground="#d9d9d9")
        self.dashboard_logout_button.configure(highlightcolor="black")
        self.dashboard_logout_button.configure(pady="0")
        self.dashboard_logout_button.configure(text='''Logout''')

        self.Send_money = tk.Button(self.Dashboard_frame, command=lambda: self.show_frame(self.sendmoneyscreen_frame))
        self.Send_money.place(relx=0.182, rely=0.318, height=124, width=137)
        self.Send_money.configure(activebackground="#ececec")
        self.Send_money.configure(activeforeground="#000000")
        self.Send_money.configure(background="#0080c0")
        self.Send_money.configure(disabledforeground="#a3a3a3")
        self.Send_money.configure(font="-family {Segoe UI} -size 13 -weight bold")
        self.Send_money.configure(foreground="#ffffff")
        self.Send_money.configure(highlightbackground="#d9d9d9")
        self.Send_money.configure(highlightcolor="black")
        self.Send_money.configure(pady="0")
        self.Send_money.configure(text='''Send Money''')

        self.V_T_U = tk.Button(self.Dashboard_frame, command=lambda: self.show_frame(self.VTU_frame))
        self.V_T_U.place(relx=0.545, rely=0.318, height=124, width=137)
        self.V_T_U.configure(activebackground="#ececec")
        self.V_T_U.configure(activeforeground="#000000")
        self.V_T_U.configure(background="#0080c0")
        self.V_T_U.configure(disabledforeground="#a3a3a3")
        self.V_T_U.configure(font="-family {Segoe UI} -size 13 -weight bold")
        self.V_T_U.configure(foreground="#ffffff")
        self.V_T_U.configure(highlightbackground="#d9d9d9")
        self.V_T_U.configure(highlightcolor="black")
        self.V_T_U.configure(pady="0")
        self.V_T_U.configure(text='''VTU''')

        self.Pay_bills = tk.Button(self.Dashboard_frame)
        self.Pay_bills.place(relx=0.182, rely=0.545, height=124, width=137)
        self.Pay_bills.configure(activebackground="#ececec")
        self.Pay_bills.configure(activeforeground="#000000")
        self.Pay_bills.configure(background="#0080c0")
        self.Pay_bills.configure(disabledforeground="#a3a3a3")
        self.Pay_bills.configure(font="-family {Segoe UI} -size 13 -weight bold")
        self.Pay_bills.configure(foreground="#ffffff")
        self.Pay_bills.configure(highlightbackground="#d9d9d9")
        self.Pay_bills.configure(highlightcolor="black")
        self.Pay_bills.configure(pady="0")
        self.Pay_bills.configure(text='''PayBills''')

        self.Transaction_History = tk.Button(self.Dashboard_frame, command=lambda : self.show_frame(self.transaction_history_frame))
        self.Transaction_History.place(relx=0.545, rely=0.545, height=124
                                       , width=137)
        self.Transaction_History.configure(activebackground="#ececec")
        self.Transaction_History.configure(activeforeground="#000000")
        self.Transaction_History.configure(background="#0080c0")
        self.Transaction_History.configure(disabledforeground="#a3a3a3")
        self.Transaction_History.configure(font="-family {Segoe UI} -size 13 -weight bold")
        self.Transaction_History.configure(foreground="#ffffff")
        self.Transaction_History.configure(highlightbackground="#d9d9d9")
        self.Transaction_History.configure(highlightcolor="black")
        self.Transaction_History.configure(pady="0")
        self.Transaction_History.configure(text='''Transaction History''')
        self.Transaction_History.configure(wraplength="100")


        self.user_detail_dashboard = tk.LabelFrame(self.Dashboard_frame)
        self.user_detail_dashboard.place(relx=0.136, rely=0.091, relheight=0.159
                , relwidth=0.773)
        self.user_detail_dashboard.configure(relief='flat')
        self.user_detail_dashboard.configure(foreground="black")
        self.user_detail_dashboard.configure(relief="flat")
        self.user_detail_dashboard.configure(background="#0080c0")

        self.user_fname_label = tk.Label(self.user_detail_dashboard)
        self.user_fname_label.place(relx=0.029, rely=0.095, height=21, width=204
                                    , bordermode='ignore')
        self.user_fname_label.configure(background="#0080c0")
        self.user_fname_label.configure(disabledforeground="#a3a3a3")
        self.user_fname_label.configure(font="-family {Georgia} -size 13")
        self.user_fname_label.configure(foreground="#ffffff")

        self.user_acct_label = tk.Label(self.user_detail_dashboard)
        self.user_acct_label.place(relx=0.150, rely=0.381, height=31, width=324
                , bordermode='ignore')
        self.user_acct_label.configure(background="#0080c0")
        self.user_acct_label.configure(disabledforeground="#a3a3a3")
        self.user_acct_label.configure(font="-family {Segoe UI} -size 13")
        self.user_acct_label.configure(foreground="#ffffff")
        self.user_acct_label.configure(text='''''')

        self.user_acctno_label = tk.Label(self.user_detail_dashboard)
        self.user_acctno_label.place(relx=0.088, rely=0.762, height=21, width=90
                , bordermode='ignore')
        self.user_acctno_label.configure(background="#0080c0")
        self.user_acctno_label.configure(disabledforeground="#a3a3a3")
        self.user_acctno_label.configure(font="-family {Segoe UI} -size 13")
        self.user_acctno_label.configure(foreground="#ffffff")
        self.user_acctno_label.configure(text='''Label''')


        self.userprofile_button = tk.Button(self.Dashboard_frame, command= lambda : self.show_frame(self.user_screen_frame))
        self.userprofile_button.place(relx=0.068, rely=0.015, height=34
                                      , width=67)
        self.userprofile_button.configure(activebackground="#ececec")
        self.userprofile_button.configure(activeforeground="#000000")
        self.userprofile_button.configure(background="#0080c0")
        self.userprofile_button.configure(disabledforeground="#a3a3a3")
        self.userprofile_button.configure(foreground="#ffffff")
        self.userprofile_button.configure(highlightbackground="#d9d9d9")
        self.userprofile_button.configure(highlightcolor="black")
        self.userprofile_button.configure(pady="0")
        self.userprofile_button.configure(text='''User''')

        self.notification_button = tk.Button(self.Dashboard_frame)
        self.notification_button.place(relx=0.773, rely=0.015, height=34
                                       , width=67)
        self.notification_button.configure(activebackground="#ececec")
        self.notification_button.configure(activeforeground="#000000")
        self.notification_button.configure(background="#0080c0")
        self.notification_button.configure(disabledforeground="#a3a3a3")
        self.notification_button.configure(foreground="#ffffff")
        self.notification_button.configure(highlightbackground="#d9d9d9")
        self.notification_button.configure(highlightcolor="black")
        self.notification_button.configure(pady="0")
        self.notification_button.configure(text='''Notification''')


        #===============================================
        #SENDMONEY SCREEN
        self.sendmoneyscreen_frame = tk.Frame(top)
        self.sendmoneyscreen_frame.place(relx=0.0, rely=0.0, relheight=1.0
                                         , relwidth=1.0)
        self.sendmoneyscreen_frame.configure(relief='groove')
        self.sendmoneyscreen_frame.configure(borderwidth="2")
        self.sendmoneyscreen_frame.configure(relief="groove")
        self.sendmoneyscreen_frame.configure(background="#d9d9d9")

        self.sendmoney_labelframe = tk.LabelFrame(self.sendmoneyscreen_frame)
        self.sendmoney_labelframe.place(relx=0.119, rely=0.123, relheight=0.685
                                        , relwidth=0.738)
        self.sendmoney_labelframe.configure(relief='groove')
        self.sendmoney_labelframe.configure(foreground="black")
        self.sendmoney_labelframe.configure(text='''Send Money''')
        self.sendmoney_labelframe.configure(background="#d9d9d9")

        self.source_label = tk.Label(self.sendmoney_labelframe)
        self.source_label.place(relx=0.032, rely=0.067, height=21, width=214
                                     , bordermode='ignore')
        self.source_label.configure(background="#d9d9d9")
        self.source_label.configure(disabledforeground="#a3a3a3")
        self.source_label.configure(foreground="#000000")
        self.source_label.configure(text='''Enter source account number''')

        self.source_entry = tk.Entry(self.sendmoney_labelframe)
        self.source_entry.place(relx=0.097, rely=0.135, height=20
                                     , relwidth=0.529, bordermode='ignore')
        self.source_entry.configure(background="white")
        self.source_entry.configure(disabledforeground="#a3a3a3")
        self.source_entry.configure(font="TkFixedFont")
        self.source_entry.configure(foreground="#000000")
        self.source_entry.configure(insertbackground="black")

        self.beneficiary_label = tk.Label(self.sendmoney_labelframe)
        self.beneficiary_label.place(relx=0.032, rely=0.225, height=21, width=214
                                     , bordermode='ignore')
        self.beneficiary_label.configure(background="#d9d9d9")
        self.beneficiary_label.configure(disabledforeground="#a3a3a3")
        self.beneficiary_label.configure(foreground="#000000")
        self.beneficiary_label.configure(text='''Enter beneficiary account number''')

        self.beneficiary_entry = tk.Entry(self.sendmoney_labelframe)
        self.beneficiary_entry.place(relx=0.097, rely=0.292, height=20
                                     , relwidth=0.529, bordermode='ignore')
        self.beneficiary_entry.configure(background="white")
        self.beneficiary_entry.configure(disabledforeground="#a3a3a3")
        self.beneficiary_entry.configure(font="TkFixedFont")
        self.beneficiary_entry.configure(foreground="#000000")
        self.beneficiary_entry.configure(insertbackground="black")

        self.amounttosend_label = tk.Label(self.sendmoney_labelframe)
        self.amounttosend_label.place(relx=0.032, rely=0.382, height=21
                                      , width=174, bordermode='ignore')
        self.amounttosend_label.configure(background="#d9d9d9")
        self.amounttosend_label.configure(disabledforeground="#a3a3a3")
        self.amounttosend_label.configure(foreground="#000000")
        self.amounttosend_label.configure(text='''Kindly Enter The Amount''')

        self.ammounttosend_entry = tk.Entry(self.sendmoney_labelframe)
        self.ammounttosend_entry.place(relx=0.097, rely=0.449, height=20
                                       , relwidth=0.529, bordermode='ignore')
        self.ammounttosend_entry.configure(background="white")
        self.ammounttosend_entry.configure(disabledforeground="#a3a3a3")
        self.ammounttosend_entry.configure(font="TkFixedFont")
        self.ammounttosend_entry.configure(foreground="#000000")
        self.ammounttosend_entry.configure(insertbackground="black")


        self.narration_label = tk.Label(self.sendmoney_labelframe)
        self.narration_label.place(relx=0.032, rely=0.510, height=31, width=84
                                   , bordermode='ignore')
        self.narration_label.configure(background="#d9d9d9")
        self.narration_label.configure(disabledforeground="#a3a3a3")
        self.narration_label.configure(foreground="#000000")
        self.narration_label.configure(text='''Narration''')

        self.narration_entry = tk.Entry(self.sendmoney_labelframe)
        self.narration_entry.place(relx=0.097, rely=0.582, height=40
                                   , relwidth=0.497, bordermode='ignore')
        self.narration_entry.configure(background="white")
        self.narration_entry.configure(disabledforeground="#a3a3a3")
        self.narration_entry.configure(font="TkFixedFont")
        self.narration_entry.configure(foreground="#000000")
        self.narration_entry.configure(insertbackground="black")


        self.proceed_button = tk.Button(self.sendmoney_labelframe, command=lambda :self.show_frame(self.PIN_frame))
        self.proceed_button.place(relx=0.226, rely=0.876, height=34, width=147
                                  , bordermode='ignore')
        self.proceed_button.configure(activebackground="#ececec")
        self.proceed_button.configure(activeforeground="#000000")
        self.proceed_button.configure(background="#0072a8")
        self.proceed_button.configure(disabledforeground="#a3a3a3")
        self.proceed_button.configure(foreground="#000000")
        self.proceed_button.configure(highlightbackground="#d9d9d9")
        self.proceed_button.configure(highlightcolor="black")
        self.proceed_button.configure(pady="0")
        self.proceed_button.configure(text='''Proceed''')

        self.sendmoneyback_button = tk.Button(self.sendmoneyscreen_frame,
                                                 command=lambda: self.show_frame(self.Dashboard_frame))
        self.sendmoneyback_button.place(relx=0.114, rely=0.848, height=34
                                           , width=67)
        self.sendmoneyback_button.configure(activebackground="#ececec")
        self.sendmoneyback_button.configure(activeforeground="#000000")
        self.sendmoneyback_button.configure(background="#0080c0")
        self.sendmoneyback_button.configure(disabledforeground="#a3a3a3")
        self.sendmoneyback_button.configure(foreground="#ffffff")
        self.sendmoneyback_button.configure(highlightbackground="#d9d9d9")
        self.sendmoneyback_button.configure(highlightcolor="black")
        self.sendmoneyback_button.configure(pady="0")
        self.sendmoneyback_button.configure(text='''Back''')


        #  ENTER PIN SCREEN
        self.PIN_frame = tk.Frame(top)
        self.PIN_frame.place(relx=0.0, rely=0.0, relheight=1.0, relwidth=1.0)
        self.PIN_frame.configure(relief='groove')
        self.PIN_frame.configure(borderwidth="2")
        self.PIN_frame.configure(relief="groove")
        self.PIN_frame.configure(background="#d9d9d9")

        self.enter_pin_label = tk.Label(self.PIN_frame)
        self.enter_pin_label.place(relx=0.167, rely=0.262, height=91, width=274)
        self.enter_pin_label.configure(background="#d9d9d9")
        self.enter_pin_label.configure(disabledforeground="#a3a3a3")
        self.enter_pin_label.configure(font="-family {Segoe UI} -size 24 -weight bold")
        self.enter_pin_label.configure(foreground="#000000")
        self.enter_pin_label.configure(text='''ENTER YOUR PIN''')

        self.enter_pin_entry = tk.Entry(self.PIN_frame)
        self.enter_pin_entry.place(relx=0.262, rely=0.415, height=40, relwidth=0.367)
        self.enter_pin_entry.configure(background="white")
        self.enter_pin_entry.configure(disabledforeground="#a3a3a3")
        self.enter_pin_entry.configure(font="TkFixedFont")
        self.enter_pin_entry.configure(foreground="#000000")
        self.enter_pin_entry.configure(insertbackground="black")

        self.enter_pin_button = tk.Button(self.PIN_frame, command=  self.authenticate_pin and self.send_money)
        self.proceed_button = tk.Button(self.sendmoney_labelframe, )
        self.enter_pin_button.place(relx=0.31, rely=0.554, height=44, width=107)
        self.enter_pin_button.configure(activebackground="#ececec")
        self.enter_pin_button.configure(activeforeground="#000000")
        self.enter_pin_button.configure(background="#d9d9d9")
        self.enter_pin_button.configure(disabledforeground="#a3a3a3")
        self.enter_pin_button.configure(font="-family {Segoe UI} -size 13 -weight bold")
        self.enter_pin_button.configure(foreground="#000000")
        self.enter_pin_button.configure(highlightbackground="#d9d9d9")
        self.enter_pin_button.configure(highlightcolor="black")
        self.enter_pin_button.configure(pady="0")
        self.enter_pin_button.configure(text='''PROCEED''')

        self.enter_pin_back_button = tk.Button(self.PIN_frame,
                                              command=lambda: self.show_frame(self.Dashboard_frame))
        self.enter_pin_back_button.place(relx=0.114, rely=0.848, height=34
                                        , width=67)
        self.enter_pin_back_button.configure(activebackground="#ececec")
        self.enter_pin_back_button.configure(activeforeground="#000000")
        self.enter_pin_back_button.configure(background="#0080c0")
        self.enter_pin_back_button.configure(disabledforeground="#a3a3a3")
        self.enter_pin_back_button.configure(foreground="#ffffff")
        self.enter_pin_back_button.configure(highlightbackground="#d9d9d9")
        self.enter_pin_back_button.configure(highlightcolor="black")
        self.enter_pin_back_button.configure(pady="0")
        self.enter_pin_back_button.configure(text='''Back''')
        #==============================================
        #_V_T_U SCREEN
        self.VTU_frame = tk.Frame(top)
        self.VTU_frame.place(relx=0.0, rely=0.0, relheight=1.0, relwidth=1.0)
        self.VTU_frame.configure(relief='groove')
        self.VTU_frame.configure(borderwidth="2")
        self.VTU_frame.configure(relief="groove")
        self.VTU_frame.configure(background="#d9d9d9")

        self.VTU_labelframe = tk.LabelFrame(self.VTU_frame)
        self.VTU_labelframe.place(relx=0.143, rely=0.185, relheight=0.423
                                  , relwidth=0.738)
        self.VTU_labelframe.configure(relief='groove')
        self.VTU_labelframe.configure(foreground="black")
        self.VTU_labelframe.configure(text='''VTU''')
        self.VTU_labelframe.configure(background="#d9d9d9")

        self.airtimerecharge_button = tk.Button(self.VTU_labelframe, command=lambda: self.show_frame(self.airtime_recharge_frame))
        self.airtimerecharge_button.place(relx=0.161, rely=0.255, height=44
                                          , width=177, bordermode='ignore')
        self.airtimerecharge_button.configure(activebackground="#ececec")
        self.airtimerecharge_button.configure(activeforeground="#000000")
        self.airtimerecharge_button.configure(background="#d9d9d9")
        self.airtimerecharge_button.configure(disabledforeground="#a3a3a3")
        self.airtimerecharge_button.configure(foreground="#000000")
        self.airtimerecharge_button.configure(highlightbackground="#d9d9d9")
        self.airtimerecharge_button.configure(highlightcolor="black")
        self.airtimerecharge_button.configure(pady="0")
        self.airtimerecharge_button.configure(relief="groove")
        self.airtimerecharge_button.configure(text='''Airtime Reecharge''')

        self.buydata_button = tk.Button(self.VTU_labelframe, command=lambda : self.show_frame(self.data_recharge_frame))
        self.buydata_button.place(relx=0.161, rely=0.582, height=44, width=177
                                  , bordermode='ignore')
        self.buydata_button.configure(activebackground="#ececec")
        self.buydata_button.configure(activeforeground="#000000")
        self.buydata_button.configure(background="#d9d9d9")
        self.buydata_button.configure(disabledforeground="#a3a3a3")
        self.buydata_button.configure(foreground="#000000")
        self.buydata_button.configure(highlightbackground="#d9d9d9")
        self.buydata_button.configure(highlightcolor="black")
        self.buydata_button.configure(pady="0")
        self.buydata_button.configure(relief="groove")
        self.buydata_button.configure(text='''Buy Data''')

        self.vtuback_button = tk.Button(self.VTU_frame,
                                              command=lambda: self.show_frame(self.Dashboard_frame))
        self.vtuback_button.place(relx=0.114, rely=0.848, height=34
                                        , width=67)
        self.vtuback_button.configure(activebackground="#ececec")
        self.vtuback_button.configure(activeforeground="#000000")
        self.vtuback_button.configure(background="#0080c0")
        self.vtuback_button.configure(disabledforeground="#a3a3a3")
        self.vtuback_button.configure(foreground="#ffffff")
        self.vtuback_button.configure(highlightbackground="#d9d9d9")
        self.vtuback_button.configure(highlightcolor="black")
        self.vtuback_button.configure(pady="0")
        self.vtuback_button.configure(text='''Back''')

        # =============================================
        # AIRTIME RECHARGE SCREEN

        self.airtime_recharge_frame = tk.Frame(top)
        self.airtime_recharge_frame.place(relx=0.0, rely=0.0, relheight=1.0
                                          , relwidth=1.0)
        self.airtime_recharge_frame.configure(relief='groove')
        self.airtime_recharge_frame.configure(borderwidth="2")
        self.airtime_recharge_frame.configure(relief="groove")
        self.airtime_recharge_frame.configure(background="#d9d9d9")

        self.airtime_labelframe = tk.LabelFrame(self.airtime_recharge_frame)
        self.airtime_labelframe.place(relx=0.119, rely=0.108, relheight=0.623
                                      , relwidth=0.69)
        self.airtime_labelframe.configure(relief='groove')
        self.airtime_labelframe.configure(foreground="black")
        self.airtime_labelframe.configure(text='''Airtime Recharge''')
        self.airtime_labelframe.configure(background="#d9d9d9")

        self.reciever_phone_label = tk.Label(self.airtime_labelframe)
        self.reciever_phone_label.place(relx=0.034, rely=0.074, height=36
                                        , width=154, bordermode='ignore')
        self.reciever_phone_label.configure(background="#d9d9d9")
        self.reciever_phone_label.configure(disabledforeground="#a3a3a3")
        self.reciever_phone_label.configure(foreground="#000000")
        self.reciever_phone_label.configure(text='''Enter Reciever Number''')

        self.airtime_phone_entry = tk.Entry(self.airtime_labelframe)
        self.airtime_phone_entry.place(relx=0.103, rely=0.148, height=20
                                       , relwidth=0.462, bordermode='ignore')
        self.airtime_phone_entry.configure(background="white")
        self.airtime_phone_entry.configure(disabledforeground="#a3a3a3")
        self.airtime_phone_entry.configure(font="TkFixedFont")
        self.airtime_phone_entry.configure(foreground="#000000")
        self.airtime_phone_entry.configure(insertbackground="black")

        self.airtime_amt_label = tk.Label(self.airtime_labelframe)
        self.airtime_amt_label.place(relx=0.103, rely=0.222, height=29, width=84
                                     , bordermode='ignore')
        self.airtime_amt_label.configure(background="#d9d9d9")
        self.airtime_amt_label.configure(disabledforeground="#a3a3a3")
        self.airtime_amt_label.configure(foreground="#000000")
        self.airtime_amt_label.configure(text='''Enter Amount''')

        self.airtime_amt_entry = tk.Entry(self.airtime_labelframe)
        self.airtime_amt_entry.place(relx=0.103, rely=0.321, height=20
                                     , relwidth=0.462, bordermode='ignore')
        self.airtime_amt_entry.configure(background="white")
        self.airtime_amt_entry.configure(cursor="fleur")
        self.airtime_amt_entry.configure(disabledforeground="#a3a3a3")
        self.airtime_amt_entry.configure(font="TkFixedFont")
        self.airtime_amt_entry.configure(foreground="#000000")
        self.airtime_amt_entry.configure(insertbackground="black")

        self.airtime_opp_labelframe = tk.LabelFrame(self.airtime_labelframe)
        self.airtime_opp_labelframe.place(relx=0.069, rely=0.395, relheight=0.254
                                          , relwidth=0.828, bordermode='ignore')
        self.airtime_opp_labelframe.configure(relief='groove')
        self.airtime_opp_labelframe.configure(foreground="black")
        self.airtime_opp_labelframe.configure(text='''Choose Network''')
        self.airtime_opp_labelframe.configure(background="#d9d9d9")

        self.MTN_button = tk.Button(self.airtime_opp_labelframe)
        self.MTN_button.place(relx=0.042, rely=0.398, height=24, width=37
                              , bordermode='ignore')
        self.MTN_button.configure(activebackground="#ececec")
        self.MTN_button.configure(activeforeground="#000000")
        self.MTN_button.configure(background="#d9d9d9")
        self.MTN_button.configure(disabledforeground="#a3a3a3")
        self.MTN_button.configure(foreground="#000000")
        self.MTN_button.configure(highlightbackground="#d9d9d9")
        self.MTN_button.configure(highlightcolor="black")
        self.MTN_button.configure(pady="0")
        self.MTN_button.configure(relief="sunken")
        self.MTN_button.configure(text='''MTN''')

        self.GLO_button = tk.Button(self.airtime_opp_labelframe)
        self.GLO_button.place(relx=0.25, rely=0.388, height=24, width=47
                              , bordermode='ignore')
        self.GLO_button.configure(activebackground="#ececec")
        self.GLO_button.configure(activeforeground="#000000")
        self.GLO_button.configure(background="#d9d9d9")
        self.GLO_button.configure(disabledforeground="#a3a3a3")
        self.GLO_button.configure(foreground="#000000")
        self.GLO_button.configure(highlightbackground="#d9d9d9")
        self.GLO_button.configure(highlightcolor="black")
        self.GLO_button.configure(pady="0")
        self.GLO_button.configure(relief="sunken")
        self.GLO_button.configure(text='''GLO''')

        self.AIRTEL_button = tk.Button(self.airtime_opp_labelframe)
        self.AIRTEL_button.place(relx=0.5, rely=0.388, height=24, width=47
                                 , bordermode='ignore')
        self.AIRTEL_button.configure(activebackground="#ececec")
        self.AIRTEL_button.configure(activeforeground="#000000")
        self.AIRTEL_button.configure(background="#d9d9d9")
        self.AIRTEL_button.configure(disabledforeground="#a3a3a3")
        self.AIRTEL_button.configure(foreground="#000000")
        self.AIRTEL_button.configure(highlightbackground="#d9d9d9")
        self.AIRTEL_button.configure(highlightcolor="black")
        self.AIRTEL_button.configure(pady="0")
        self.AIRTEL_button.configure(relief="sunken")
        self.AIRTEL_button.configure(text='''AIRTEL''')

        self.ETI_button = tk.Button(self.airtime_opp_labelframe)
        self.ETI_button.place(relx=0.75, rely=0.388, height=24, width=47
                              , bordermode='ignore')
        self.ETI_button.configure(activebackground="#ececec")
        self.ETI_button.configure(activeforeground="#000000")
        self.ETI_button.configure(background="#d9d9d9")
        self.ETI_button.configure(disabledforeground="#a3a3a3")
        self.ETI_button.configure(foreground="#000000")
        self.ETI_button.configure(highlightbackground="#d9d9d9")
        self.ETI_button.configure(highlightcolor="black")
        self.ETI_button.configure(pady="0")
        self.ETI_button.configure(relief="sunken")
        self.ETI_button.configure(text='''9mobile''')

        self.airtime_pin_label = tk.Label(self.airtime_labelframe)
        self.airtime_pin_label.place(relx=0.069, rely=0.667, height=21, width=74
                                     , bordermode='ignore')
        self.airtime_pin_label.configure(background="#d9d9d9")
        self.airtime_pin_label.configure(disabledforeground="#a3a3a3")
        self.airtime_pin_label.configure(foreground="#000000")
        self.airtime_pin_label.configure(text='''Enter Pin''')

        self.airtime_pin_entry = tk.Entry(self.airtime_labelframe)
        self.airtime_pin_entry.place(relx=0.103, rely=0.741, height=20
                                     , relwidth=0.324, bordermode='ignore')
        self.airtime_pin_entry.configure(background="white")
        self.airtime_pin_entry.configure(disabledforeground="#a3a3a3")
        self.airtime_pin_entry.configure(font="TkFixedFont")
        self.airtime_pin_entry.configure(foreground="#000000")
        self.airtime_pin_entry.configure(insertbackground="black")

        self.airtime_proceed_button = tk.Button(self.airtime_labelframe, command=self.vtu)
        self.airtime_proceed_button.place(relx=0.172, rely=0.864, height=24
                                          , width=137, bordermode='ignore')
        self.airtime_proceed_button.configure(activebackground="#ececec")
        self.airtime_proceed_button.configure(activeforeground="#000000")
        self.airtime_proceed_button.configure(background="#d9d9d9")
        self.airtime_proceed_button.configure(disabledforeground="#a3a3a3")
        self.airtime_proceed_button.configure(foreground="#000000")
        self.airtime_proceed_button.configure(highlightbackground="#d9d9d9")
        self.airtime_proceed_button.configure(highlightcolor="black")
        self.airtime_proceed_button.configure(pady="0")
        self.airtime_proceed_button.configure(text='''Proceed''')

        self.airtime_back_button = tk.Button(self.airtime_recharge_frame,
                                        command=lambda: self.show_frame(self.VTU_frame))
        self.airtime_back_button.place(relx=0.114, rely=0.848, height=34
                                  , width=67)
        self.airtime_back_button.configure(activebackground="#ececec")
        self.airtime_back_button.configure(activeforeground="#000000")
        self.airtime_back_button.configure(background="#0080c0")
        self.airtime_back_button.configure(disabledforeground="#a3a3a3")
        self.airtime_back_button.configure(foreground="#ffffff")
        self.airtime_back_button.configure(highlightbackground="#d9d9d9")
        self.airtime_back_button.configure(highlightcolor="black")
        self.airtime_back_button.configure(pady="0")
        self.airtime_back_button.configure(text='''Back''')

        #==============================================
        #BUY DATA SCREEN

        self.data_recharge_frame = tk.Frame(top)
        self.data_recharge_frame.place(relx=0.0, rely=0.0, relheight=1.0
                                          , relwidth=1.0)
        self.data_recharge_frame.configure(relief='groove')
        self.data_recharge_frame.configure(borderwidth="2")
        self.data_recharge_frame.configure(relief="groove")
        self.data_recharge_frame.configure(background="#d9d9d9")

        self.data_labelframe = tk.LabelFrame(self.data_recharge_frame)
        self.data_labelframe.place(relx=0.119, rely=0.108, relheight=0.623
                                      , relwidth=0.69)
        self.data_labelframe.configure(relief='groove')
        self.data_labelframe.configure(foreground="black")
        self.data_labelframe.configure(text='''Data Recharge''')
        self.data_labelframe.configure(background="#d9d9d9")

        self.reciever_phone_label = tk.Label(self.data_labelframe)
        self.reciever_phone_label.place(relx=0.034, rely=0.074, height=36
                                        , width=154, bordermode='ignore')
        self.reciever_phone_label.configure(background="#d9d9d9")
        self.reciever_phone_label.configure(disabledforeground="#a3a3a3")
        self.reciever_phone_label.configure(foreground="#000000")
        self.reciever_phone_label.configure(text='''Enter Reciever Number''')

        self.data_phone_entry = tk.Entry(self.data_labelframe)
        self.data_phone_entry.place(relx=0.103, rely=0.148, height=20
                                       , relwidth=0.462, bordermode='ignore')
        self.data_phone_entry.configure(background="white")
        self.data_phone_entry.configure(disabledforeground="#a3a3a3")
        self.data_phone_entry.configure(font="TkFixedFont")
        self.data_phone_entry.configure(foreground="#000000")
        self.data_phone_entry.configure(insertbackground="black")

        self.data_amt_label = tk.Label(self.data_labelframe)
        self.data_amt_label.place(relx=0.103, rely=0.222, height=29, width=84
                                     , bordermode='ignore')
        self.data_amt_label.configure(background="#d9d9d9")
        self.data_amt_label.configure(disabledforeground="#a3a3a3")
        self.data_amt_label.configure(foreground="#000000")
        self.data_amt_label.configure(text='''Enter Amount''')

        self.data_amt_entry = tk.Entry(self.data_labelframe)
        self.data_amt_entry.place(relx=0.103, rely=0.321, height=20
                                     , relwidth=0.462, bordermode='ignore')
        self.data_amt_entry.configure(background="white")
        self.data_amt_entry.configure(cursor="fleur")
        self.data_amt_entry.configure(disabledforeground="#a3a3a3")
        self.data_amt_entry.configure(font="TkFixedFont")
        self.data_amt_entry.configure(foreground="#000000")
        self.data_amt_entry.configure(insertbackground="black")

        self.data_opp_labelframe = tk.LabelFrame(self.data_labelframe)
        self.data_opp_labelframe.place(relx=0.069, rely=0.395, relheight=0.254
                                          , relwidth=0.828, bordermode='ignore')
        self.data_opp_labelframe.configure(relief='groove')
        self.data_opp_labelframe.configure(foreground="black")
        self.data_opp_labelframe.configure(text='''Choose Network''')
        self.data_opp_labelframe.configure(background="#d9d9d9")

        self.MTN_button = tk.Button(self.data_opp_labelframe)
        self.MTN_button.place(relx=0.042, rely=0.398, height=24, width=37
                              , bordermode='ignore')
        self.MTN_button.configure(activebackground="#ececec")
        self.MTN_button.configure(activeforeground="#000000")
        self.MTN_button.configure(background="#d9d9d9")
        self.MTN_button.configure(disabledforeground="#a3a3a3")
        self.MTN_button.configure(foreground="#000000")
        self.MTN_button.configure(highlightbackground="#d9d9d9")
        self.MTN_button.configure(highlightcolor="black")
        self.MTN_button.configure(pady="0")
        self.MTN_button.configure(relief="sunken")
        self.MTN_button.configure(text='''MTN''')

        self.GLO_button = tk.Button(self.data_opp_labelframe)
        self.GLO_button.place(relx=0.25, rely=0.388, height=24, width=47
                              , bordermode='ignore')
        self.GLO_button.configure(activebackground="#ececec")
        self.GLO_button.configure(activeforeground="#000000")
        self.GLO_button.configure(background="#d9d9d9")
        self.GLO_button.configure(disabledforeground="#a3a3a3")
        self.GLO_button.configure(foreground="#000000")
        self.GLO_button.configure(highlightbackground="#d9d9d9")
        self.GLO_button.configure(highlightcolor="black")
        self.GLO_button.configure(pady="0")
        self.GLO_button.configure(relief="sunken")
        self.GLO_button.configure(text='''GLO''')

        self.AIRTEL_button = tk.Button(self.data_opp_labelframe)
        self.AIRTEL_button.place(relx=0.5, rely=0.388, height=24, width=47
                                 , bordermode='ignore')
        self.AIRTEL_button.configure(activebackground="#ececec")
        self.AIRTEL_button.configure(activeforeground="#000000")
        self.AIRTEL_button.configure(background="#d9d9d9")
        self.AIRTEL_button.configure(disabledforeground="#a3a3a3")
        self.AIRTEL_button.configure(foreground="#000000")
        self.AIRTEL_button.configure(highlightbackground="#d9d9d9")
        self.AIRTEL_button.configure(highlightcolor="black")
        self.AIRTEL_button.configure(pady="0")
        self.AIRTEL_button.configure(relief="sunken")
        self.AIRTEL_button.configure(text='''AIRTEL''')

        self.ETI_button = tk.Button(self.data_opp_labelframe)
        self.ETI_button.place(relx=0.75, rely=0.388, height=24, width=47
                              , bordermode='ignore')
        self.ETI_button.configure(activebackground="#ececec")
        self.ETI_button.configure(activeforeground="#000000")
        self.ETI_button.configure(background="#d9d9d9")
        self.ETI_button.configure(disabledforeground="#a3a3a3")
        self.ETI_button.configure(foreground="#000000")
        self.ETI_button.configure(highlightbackground="#d9d9d9")
        self.ETI_button.configure(highlightcolor="black")
        self.ETI_button.configure(pady="0")
        self.ETI_button.configure(relief="sunken")
        self.ETI_button.configure(text='''9mobile''')

        self.data_pin_label = tk.Label(self.data_labelframe)
        self.data_pin_label.place(relx=0.069, rely=0.667, height=21, width=74
                                     , bordermode='ignore')
        self.data_pin_label.configure(background="#d9d9d9")
        self.data_pin_label.configure(disabledforeground="#a3a3a3")
        self.data_pin_label.configure(foreground="#000000")
        self.data_pin_label.configure(text='''Enter Pin''')

        self.data_pin_entry = tk.Entry(self.data_labelframe)
        self.data_pin_entry.place(relx=0.103, rely=0.741, height=20
                                     , relwidth=0.324, bordermode='ignore')
        self.data_pin_entry.configure(background="white")
        self.data_pin_entry.configure(disabledforeground="#a3a3a3")
        self.data_pin_entry.configure(font="TkFixedFont")
        self.data_pin_entry.configure(foreground="#000000")
        self.data_pin_entry.configure(insertbackground="black")

        self.data_proceed_button = tk.Button(self.data_labelframe)
        self.data_proceed_button.place(relx=0.172, rely=0.864, height=24
                                          , width=137, bordermode='ignore')
        self.data_proceed_button.configure(activebackground="#ececec")
        self.data_proceed_button.configure(activeforeground="#000000")
        self.data_proceed_button.configure(background="#d9d9d9")
        self.data_proceed_button.configure(disabledforeground="#a3a3a3")
        self.data_proceed_button.configure(foreground="#000000")
        self.data_proceed_button.configure(highlightbackground="#d9d9d9")
        self.data_proceed_button.configure(highlightcolor="black")
        self.data_proceed_button.configure(pady="0")
        self.data_proceed_button.configure(text='''Proceed''')

        self.data_back_button = tk.Button(self.data_recharge_frame,
                                             command=lambda: self.show_frame(self.VTU_frame))
        self.data_back_button.place(relx=0.114, rely=0.848, height=34
                                       , width=67)
        self.data_back_button.configure(activebackground="#ececec")
        self.data_back_button.configure(activeforeground="#000000")
        self.data_back_button.configure(background="#0080c0")
        self.data_back_button.configure(disabledforeground="#a3a3a3")
        self.data_back_button.configure(foreground="#ffffff")
        self.data_back_button.configure(highlightbackground="#d9d9d9")
        self.data_back_button.configure(highlightcolor="black")
        self.data_back_button.configure(pady="0")
        self.data_back_button.configure(text='''Back''')


        # TRANSACTION HISTORY SCREEN

        self.transaction_history_frame = tk.Frame(top)
        self.transaction_history_frame.place(relx=0.0, rely=0.0, relheight=1.0
                                            , relwidth=1.0)
        self.transaction_history_frame.configure(relief='groove')
        self.transaction_history_frame.configure(borderwidth="2")
        self.transaction_history_frame.configure(relief="groove")
        self.transaction_history_frame.configure(background="#d9d9d9")

        # =================================================================
        # USER SCREEN
        self.user_screen_frame = tk.Frame(top)
        self.user_screen_frame.place(relx=-0.19, rely=0.0, relheight=1.0
                                     , relwidth=0.857)
        self.user_screen_frame.configure(relief='flat')
        self.user_screen_frame.configure(borderwidth="2")
        self.user_screen_frame.configure(background="#ffffff")
        self.user_screen_frame.configure(cursor="arrow")
        self.user_screen_frame.configure(highlightbackground="#d9d9d9")
        self.user_screen_frame.configure(highlightcolor="black")

        self.user_changepwd_btn = tk.Button(self.user_screen_frame)
        self.user_changepwd_btn.place(relx=0.556, rely=0.2, height=34, width=147)

        self.user_changepwd_btn.configure(activebackground="#ececec")
        self.user_changepwd_btn.configure(activeforeground="#000000")
        self.user_changepwd_btn.configure(background="#017ec2")
        self.user_changepwd_btn.configure(cursor="arrow")
        self.user_changepwd_btn.configure(disabledforeground="#a3a3a3")
        self.user_changepwd_btn.configure(font="-family {Segoe UI} -size 10")
        self.user_changepwd_btn.configure(foreground="#ffffff")
        self.user_changepwd_btn.configure(highlightbackground="#d9d9d9")
        self.user_changepwd_btn.configure(highlightcolor="black")
        self.user_changepwd_btn.configure(overrelief="sunken")
        self.user_changepwd_btn.configure(pady="0")
        self.user_changepwd_btn.configure(relief="flat")
        self.user_changepwd_btn.configure(text='''Change Password''')

        self.user_changepin_btn_1 = tk.Button(self.user_screen_frame)
        self.user_changepin_btn_1.place(relx=0.556, rely=0.292, height=34
                                        , width=147)
        self.user_changepin_btn_1.configure(activebackground="#ececec")
        self.user_changepin_btn_1.configure(activeforeground="#000000")
        self.user_changepin_btn_1.configure(background="#017ec2")
        self.user_changepin_btn_1.configure(cursor="arrow")
        self.user_changepin_btn_1.configure(disabledforeground="#a3a3a3")
        self.user_changepin_btn_1.configure(font="-family {Segoe UI} -size 10")
        self.user_changepin_btn_1.configure(foreground="#ffffff")
        self.user_changepin_btn_1.configure(highlightbackground="#d9d9d9")
        self.user_changepin_btn_1.configure(highlightcolor="black")
        self.user_changepin_btn_1.configure(overrelief="sunken")
        self.user_changepin_btn_1.configure(pady="0")
        self.user_changepin_btn_1.configure(relief="flat")
        self.user_changepin_btn_1.configure(text='''Change Transaction PIN''')

        self.user_forgetpin_btn_2 = tk.Button(self.user_screen_frame)
        self.user_forgetpin_btn_2.place(relx=0.556, rely=0.369, height=34
                                        , width=147)
        self.user_forgetpin_btn_2.configure(activebackground="#ececec")
        self.user_forgetpin_btn_2.configure(activeforeground="#000000")
        self.user_forgetpin_btn_2.configure(background="#017ec2")
        self.user_forgetpin_btn_2.configure(cursor="arrow")
        self.user_forgetpin_btn_2.configure(disabledforeground="#a3a3a3")
        self.user_forgetpin_btn_2.configure(font="-family {Segoe UI} -size 10")
        self.user_forgetpin_btn_2.configure(foreground="#ffffff")
        self.user_forgetpin_btn_2.configure(highlightbackground="#d9d9d9")
        self.user_forgetpin_btn_2.configure(highlightcolor="black")
        self.user_forgetpin_btn_2.configure(overrelief="sunken")
        self.user_forgetpin_btn_2.configure(pady="0")
        self.user_forgetpin_btn_2.configure(relief="flat")
        self.user_forgetpin_btn_2.configure(text='''Forgot Transaction PIN''')

        self.logout_button = tk.Button(self.user_screen_frame, command=lambda : self.show_frame(self.Home_screen))
        self.logout_button.place(relx=0.5, rely=0.892, height=34, width=147)
        self.logout_button.configure(activebackground="#ececec")
        self.logout_button.configure(activeforeground="#000000")
        self.logout_button.configure(background="#017ec2")
        self.logout_button.configure(cursor="arrow")
        self.logout_button.configure(disabledforeground="#a3a3a3")
        self.logout_button.configure(font="-family {Segoe UI} -size 12 -weight bold")
        self.logout_button.configure(foreground="#ffffff")
        self.logout_button.configure(highlightbackground="#d9d9d9")
        self.logout_button.configure(highlightcolor="black")
        self.logout_button.configure(overrelief="sunken")
        self.logout_button.configure(pady="0")
        self.logout_button.configure(relief="flat")
        self.logout_button.configure(text='''Logout''')

        self.back_button = tk.Button(self.user_screen_frame, command=lambda : self.show_frame(self.Dashboard_frame))
        self.back_button.place(relx=0.278, rely=0.015, height=24, width=47)
        self.back_button.configure(activebackground="#ececec")
        self.back_button.configure(activeforeground="#000000")
        self.back_button.configure(background="#017ec2")
        self.back_button.configure(cursor="arrow")
        self.back_button.configure(disabledforeground="#a3a3a3")
        self.back_button.configure(foreground="#ffffff")
        self.back_button.configure(highlightbackground="#d9d9d9")
        self.back_button.configure(highlightcolor="black")
        self.back_button.configure(pady="0")
        self.back_button.configure(relief="flat")
        self.back_button.configure(text='''Back''')

        #==============================================
        #CONTACT US SCREEN

        self.contact_screen = tk.Frame(top)
        self.contact_screen.place(x=0, y=0, height=650, width=420)
        self.contact_screen.configure(relief='groove')
        self.contact_screen.configure(borderwidth="2")
        self.contact_screen.configure(relief="groove")
        self.contact_screen.configure(background="#ffffff")
        self.contact_screen.configure(cursor="arrow")
        self.contact_screen.configure(highlightbackground="#d9d9d9")
        self.contact_screen.configure(highlightcolor="black")

        self.back_button = tk.Button(self.contact_screen, command=lambda : self.show_frame(self.Home_screen))
        self.back_button.place(x=30, y=20, height=24, width=47)
        self.back_button.configure(activebackground="#ececec")
        self.back_button.configure(activeforeground="#000000")
        self.back_button.configure(background="#d9d9d9")
        self.back_button.configure(disabledforeground="#a3a3a3")
        self.back_button.configure(foreground="#000000")
        self.back_button.configure(highlightbackground="#d9d9d9")
        self.back_button.configure(highlightcolor="black")
        self.back_button.configure(pady="0")
        self.back_button.configure(text='''<<<<''')

        self.Contct_us_label = tk.Label(self.contact_screen)
        self.Contct_us_label.place(x=0, y=110, height=41, width=154)
        self.Contct_us_label.configure(background="#ffffff")
        self.Contct_us_label.configure(disabledforeground="#a3a3a3")
        self.Contct_us_label.configure(font="-family {Georgia} -size 17 -weight bold")
        self.Contct_us_label.configure(foreground="#000000")
        self.Contct_us_label.configure(text='''Contact Us''')

        self.TSeparator1 = ttk.Separator(self.contact_screen)
        self.TSeparator1.place(x=4, y=153, width=0)

        self.call_image = tk.Label(self.contact_screen)
        self.call_image.place(x=20, y=180, height=61, width=54)
        self.call_image.configure(background="#d9d9d9")
        self.call_image.configure(disabledforeground="#a3a3a3")
        self.call_image.configure(foreground="#000000")
        self.call_image.configure(text='''Label''')

        self.call_label = tk.Label(self.contact_screen)
        self.call_label.place(x=90, y=200, height=31, width=44)
        self.call_label.configure(background="#ffffff")
        self.call_label.configure(disabledforeground="#a3a3a3")
        self.call_label.configure(font="-family {Georgia} -size 15")
        self.call_label.configure(foreground="#000000")
        self.call_label.configure(text='''Call''')

        self.number_one = tk.Label(self.contact_screen)
        self.number_one.place(x=140, y=250, height=21, width=144)
        self.number_one.configure(background="#ffffff")
        self.number_one.configure(disabledforeground="#a3a3a3")
        self.number_one.configure(font="-family {Segoe UI} -size 14")
        self.number_one.configure(foreground="#000000")
        self.number_one.configure(text='''+2348158348908''')

        self.number_two = tk.Label(self.contact_screen)
        self.number_two.place(x=140, y=280, height=21, width=154)
        self.number_two.configure(background="#ffffff")
        self.number_two.configure(disabledforeground="#a3a3a3")
        self.number_two.configure(font="-family {Segoe UI} -size 14")
        self.number_two.configure(foreground="#000000")
        self.number_two.configure(text='''+2349090474500''')

        self.TSeparator2 = ttk.Separator(self.contact_screen)
        self.TSeparator2.place(x=4, y=322, width=0)


        self.email_image = tk.Label(self.contact_screen)
        self.email_image.place(x=20, y=340, height=61, width=54)
        self.email_image.configure(background="#d9d9d9")
        self.email_image.configure(disabledforeground="#a3a3a3")
        self.email_image.configure(foreground="#000000")
        self.email_image.configure(text='''Label''')
        # self.email_image.configure(image=)

        self.email_label = tk.Label(self.contact_screen)
        self.email_label.place(x=90, y=370, height=21, width=64)
        self.email_label.configure(background="#ffffff")
        self.email_label.configure(disabledforeground="#a3a3a3")
        self.email_label.configure(font="-family {Georgia} -size 14")
        self.email_label.configure(foreground="#000000")
        self.email_label.configure(text='''Email''')

        self.emaill_label = tk.Label(self.contact_screen)
        self.emaill_label.place(x=150, y=410, height=21, width=174)
        self.emaill_label.configure(background="#ffffff")
        self.emaill_label.configure(disabledforeground="#a3a3a3")
        self.emaill_label.configure(font="-family {Georgia} -size 12")
        self.emaill_label.configure(foreground="#000000")
        self.emaill_label.configure(text='''ybiobaku1@gmail.com''')

        self.TSeparator3 = ttk.Separator(self.contact_screen)
        self.TSeparator3.place(x=2, y=452, width=0)

        self.instagram_label = tk.Label(self.contact_screen)
        self.instagram_label.place(x=110, y=520, height=41, width=34)
        self.instagram_label.configure(background="#c0c0c0")
        self.instagram_label.configure(disabledforeground="#a3a3a3")
        self.instagram_label.configure(foreground="#000000")
        # photo_location = os.path.join(prog_location, "images/instagramlogo.png")
        # global _img1
        # _img1 = tk.PhotoImage(file=photo_location)
        # self.instagram_label.configure(image=_img1)
        self.instagram_label.configure(text='''Label''')

        self.facebook_label = tk.Label(self.contact_screen)
        self.facebook_label.place(x=170, y=520, height=41, width=34)
        self.facebook_label.configure(background="#d9d9d9")
        self.facebook_label.configure(disabledforeground="#a3a3a3")
        self.facebook_label.configure(foreground="#000000")
        photo_location = os.path.join(prog_location, "images/facebook.png")
        global _img2
        _img2 = tk.PhotoImage(file=photo_location)
        self.facebook_label.configure(image=_img2)
        self.facebook_label.configure(text='''Label''')


        self.twitter_label = tk.Label(self.contact_screen)
        self.twitter_label.place(x=230, y=520, height=41, width=34)
        self.twitter_label.configure(background="#d9d9d9")
        self.twitter_label.configure(disabledforeground="#a3a3a3")
        self.twitter_label.configure(foreground="#000000")
        photo_location = os.path.join(prog_location, "images/twitter.png")
        global _img3
        _img3 = tk.PhotoImage(file=photo_location)
        self.twitter_label.configure(image=_img3)

        self.twitter_label.configure(text='''Label''')

        #ABOUT US SCREEN
        self.About_screen = tk.Frame(top)
        self.About_screen.place(relx=0.0, rely=0.0, relheight=1.0
                                  , relwidth=1.0)
        self.About_screen.configure(relief='groove')
        self.About_screen.configure(borderwidth="2")
        self.About_screen.configure(relief="groove")
        self.About_screen.configure(background="#d9d9d9")

        self.about_labelframe = tk.LabelFrame(self.About_screen)
        self.about_labelframe.place(relx=0.077, rely=0.154, relheight=0.608
                                      , relwidth=0.857)
        self.about_labelframe.configure(relief='groove')
        self.about_labelframe.configure(foreground="black")
        self.about_labelframe.configure(text='''About Us ''')
        self.about_labelframe.configure(background="#d9d9d9")

        self.back_button = tk.Button(self.About_screen, command=lambda: self.show_frame(self.Home_screen))
        self.back_button.place(x=20, y=20, width=40, height=20)
        self.back_button.configure(text='''Back''')
        self.back_button.configure(font="-family {Verdana} -size 10 -weight bold")



        # HELP US SCREEN
        self.Help_screen = tk.Frame(top)
        self.Help_screen.place(relx=0.0, rely=0.0, relheight=1.0
                                , relwidth=1.0)
        self.Help_screen.configure(relief='groove')
        self.Help_screen.configure(borderwidth="2")
        self.Help_screen.configure(relief="groove")
        self.Help_screen.configure(background="#d9d9d9")

        self.help_labelframe = tk.LabelFrame(self.Help_screen)
        self.help_labelframe.place(relx=0.077, rely=0.154, relheight=0.608
                                      , relwidth=0.857)
        self.help_labelframe.configure(relief='groove')
        self.help_labelframe.configure(foreground="black")
        self.help_labelframe.configure(text='''Help & Support''')
        self.help_labelframe.configure(background="#d9d9d9")

        self.back_button = tk.Button(self.Help_screen, command=lambda: self.show_frame(self.Home_screen))
        self.back_button.place(x=20, y=20, width=40, height=20)
        self.back_button.configure(text='''Back''')
        self.back_button.configure(font="-family {Verdana} -size 10 -weight bold")


        #SELECT GET STARTED (SIGN UP) SCREEN TYPE
        self.signup_type_frame = tk.Frame(top)
        self.signup_type_frame.place(relx=0.0, rely=0.0, relheight=1.0
                , relwidth=1.0)
        self.signup_type_frame.configure(relief='groove')
        self.signup_type_frame.configure(borderwidth="2")
        self.signup_type_frame.configure(relief="groove")
        self.signup_type_frame.configure(background="#003651")

        #EXISTING USER BUTTON
        self.existing_user_button = tk.Button(self.signup_type_frame, command=lambda: self.show_frame(self.getstarted_screen))
        self.existing_user_button.place(relx=0.31, rely=0.246, height=74
                , width=157)
        self.existing_user_button.configure(activebackground="#ececec")
        self.existing_user_button.configure(activeforeground="#000000")
        self.existing_user_button.configure(background="#116ba2")
        self.existing_user_button.configure(disabledforeground="#a3a3a3")
        self.existing_user_button.configure(foreground="#000000")
        self.existing_user_button.configure(highlightbackground="#d9d9d9")
        self.existing_user_button.configure(highlightcolor="white")
        self.existing_user_button.configure(pady="0")
        self.existing_user_button.configure(relief="flat")
        self.existing_user_button.configure(text='''Existing User''')


        #NEW USER BUTTON
        self.new_user_button = tk.Button(self.signup_type_frame, command=lambda: self.show_frame(self.account_registration_frame))
        self.new_user_button.place(relx=0.31, rely=0.462, height=74, width=157)
        self.new_user_button.configure(activebackground="#ececec")
        self.new_user_button.configure(activeforeground="#000000")
        self.new_user_button.configure(background="#116ba2")
        self.new_user_button.configure(disabledforeground="#a3a3a3")
        self.new_user_button.configure(foreground="#000000")
        self.new_user_button.configure(highlightbackground="#d9d9d9")
        self.new_user_button.configure(highlightcolor="black")
        self.new_user_button.configure(pady="0")
        self.new_user_button.configure(relief="flat")
        self.new_user_button.configure(text='''New User''')


        self.back_button = tk.Button(self.signup_type_frame, command=lambda: self.show_frame(self.Home_screen))
        self.back_button.place(x=20, y=20, width=40, height=20)
        self.back_button.configure(text='''Back''')
        self.back_button.configure(font="-family {Verdana} -size 10 -weight bold")


        # self.TEntry1 = ttk.Entry(self.account_registration_frame)
        # self.TEntry1.place(relx=0.524, rely=0.123, relheight=0.032, relwidth=0.3)
        #
        # self.TEntry1.configure(takefocus="")
        # self.TEntry1.configure(cursor="ibeam")
        #

        # retrieve balance



        self.show_frame(self.Home_screen)

    def show_frame(self, frame):
        if frame == self.Dashboard_frame:
            self.get_user_acct_balance()

        if frame == self.transaction_history_frame:
            self.get_Transaction_history()


        self.frame = frame
        self.frame.tkraise()



    def register(self):
        # global firstname, lastname, othername, password, pin, acctno, bvn, email
        title = self.title_TCombobox.get()
        firstname = self.firstname_Entry.get()
        lastname = self.lastname_creation_Entry.get()
        othername = self.othername_cretion_Entry.get()
        gender = self.gender_TCombobox.get()
        dob_day = self.user_dob_day.get()
        dob_month = self.user_dob_month.get()
        dob_year = self.user_dob_year.get()
        password = self.password_creation_entry.get()
        confirm = self.cpwd_creation_entry.get()
        email = self.email_creation_entry.get()
        phone = self.phone_creation_Entry.get()
        state = self.state_TCombobox.get()
        country = self.country_TCombobox.get()
        # bvn = self.bvn_creation_Entry.get()
        idcard  = self.id_creation_Entry.get()
        nok = self.nok_creation_Entry.get()
        zipcode = self.zipcode_entry.get()
        pin = self.pin_entry.get()

        acctno = random.randint(1111111111, 9999999999)
        bvn = random.randint(2222222222, 9999999999)

        if dob_day == '' or dob_month == '' or dob_year == '':
            # str_dob= '00-00-0000'
            # dob = datetime.strptime(str_dob,"%d-%m-%y").date()
            dob = '0000-00-00'
        else:
            dob = f"{dob_year}{dob_month}{dob_day}"
            # dob = datetime.strptime(str_dob, "%d-%m-%y").date()
        created = datetime.now()

        password = password.encode('utf-8')

        password = bcrypt.hashpw(password, bcrypt.gensalt())
        print(password)
        password = bytes.decode(password) #str.decode
        print(password)

        pin = pin.encode('utf-8')

        pin = bcrypt.hashpw(pin, bcrypt.gensalt())
        print(password)
        pin = bytes.decode(pin)  # str.decode
        print(pin)


        sql = f"""INSERT INTO users (acctno, title, firstname, lastname, username, email, password,  address,  gender, dob, phone, nok, state, zipcode, 
             pin, bvn, idcard, country,  created,  updated ) VALUES ('{acctno}', '{title}', '{firstname}', '{lastname}', 
              '{othername}', '{email}', '{password}', '', '{gender}', '{dob}', '{phone}', '{nok}', '{state}', '{zipcode}',
             '{pin}', '{bvn}', '{idcard}', '{country}', '{created}', '{created}')"""

        print(sql)
        self.cursor.execute(sql)
        self.conn.commit()


    def authenticate(self):

        email =  self.login_email_entry.get()
        password = self.login_password_entry.get()
        password = password.encode('utf-8')

        sql = f"SELECT `password` FROM users WHERE `email` = '{email}'"
        self.cursor.execute(sql)
        result = self.cursor.fetchall()

        if result == []:
            messagebox.showerror("Error", "User does not exist")
        else:
            hash_pwd = str.encode(result[0][0])
            print(hash_pwd)

            if bcrypt.checkpw(password, hash_pwd):
                sql_1 = f"SELECT * FROM users WHERE `email` = '{email}'"
                self.cursor.execute(sql_1)
                res = self.cursor.fetchall()
                print("USER DETAILS: ", res[0])
                user_val = res[0]
                user_details = shelve.open("userdetails", flag="n")
                user_details['user'] = user_val
                self.show_frame(self.Dashboard_frame)
            else:
                messagebox.showerror("Error", "Incorrect email or password")

        self.login_email_entry.delete(0, END)
        self.login_password_entry.delete(0, END)


    def authenticate_pin(self):

        pin = self.enter_pin_entry.get()
        pin = pin.encode('utf-8')

        user_details = shelve.open("userdetails")
        user = user_details["user"]
        sender_acct = user[1]

        sql_5 = f"SELECT `pin` FROM users WHERE `acctno` = '{sender_acct}'"
        self.cursor.execute(sql_5)
        result = self.cursor.fetchall()

        if result == []:
            messagebox.showerror("Error", "Enter a correct Pin")


    def send_money(self):
        user_details = shelve.open("userdetails")
        user = user_details["user"]
        sender_acct = user[1]
        print("sender acct", sender_acct)



        reciever_acctno = self.beneficiary_entry.get()
        print("reciever acct", reciever_acctno)

        reciever_amount = self.ammounttosend_entry.get()

        # try:
        # sender sql query
        sql = f"SELECT `balance` FROM `users` WHERE `acctno` = '{sender_acct}'"
        self.cursor.execute(sql)
        res_1 = self.cursor.fetchall()
        balance_1 = res_1[0][0]
        print(balance_1)
        balance_1 = balance_1 - int(reciever_amount)

        sql_1 = f"UPDATE `users` SET `balance` = '{balance_1}' WHERE `acctno` = '{sender_acct}'"
        self.cursor.execute(sql_1)

        # withdraw from user
        # sql_update_query = f"UPDATE `user` SET `balance` = '{1000}' WHERE `id` = '{4}"

        # Receiver sql query
        sql_2 = f"SELECT `balance` FROM `users` WHERE `acctno` = '{reciever_acctno}'"
        self.cursor.execute(sql_2)
        res_2 = self.cursor.fetchall()
        balance_2 = res_2[0][0]
        balance_2 = balance_2 + int(reciever_amount)

        sql_3 = f"UPDATE `users` SET `balance` = '{balance_2}' WHERE `acctno` = '{reciever_acctno}'"
        self.cursor.execute(sql_3)
        self.conn.commit()

        # transaction history
        created = datetime.now()

        sql_4 = f"""INSERT INTO transaction (reciever_acctno, sender_acctno, amount, transaction_name, created, updated)
                              VALUES ('{reciever_acctno}', '{sender_acct}', '{reciever_amount}', "debit", '{created}', '{created}')"""

        self.cursor.execute(sql_4)
        self.conn.commit()
        print(sql_4)

        # 3758375529
        messagebox.showinfo("Success", "Transaction Successful.")
        # except Exception as e:
        # messagebox.showerror("Error", "Something went wrong! ")

    def existing_user(self):
        acctno = self.signup_account_number_entry.get()
        password = self.signup_account_number_password_entry.get()

        #encrypt the password
        password = password.encode('utf-8')

        password = bcrypt.hashpw(password, bcrypt.gensalt())

        password = bytes.decode(password)

        #check if user is a valid account holder
        sql = f"SELECT * FROM users WHERE `acctno` = '{acctno}'"
        self.cursor.execute(sql)
        result = self.cursor.fetchall()

        if not result:
            messagebox.showerror("Error!", "User does not exist!")
        else:
            try:
                sql_1 = f"UPDATE users SET `password` = '{password}' WHERE `acctno` = '{acctno}'"
                self.cursor.execute(sql_1)
                messagebox.showinfo("User Successfully Created!")
            except:
                messagebox.showerror("Error", "Something went Wrong")



    def get_user_acct_balance(self):
        user_details = shelve.open("userdetails")
        user = user_details['user']
        sender_acct = user[1]
        firstname = user[3]
        lastname = user[4]
        othername = user[5]
        # print("Hello" + firstname+ ",")

        sql = f"SELECT  `balance`  FROM `users` WHERE  `acctno` = '{sender_acct}'"
        self.cursor.execute(sql)
        result = self.cursor.fetchall()
        balance = str(result[0][0])

        self.user_acct_label.configure(text=f"{balance}")
        self.user_acctno_label.configure(text= f"{sender_acct}")
        self.user_fname_label.configure(text= f"{firstname} {lastname}  {othername}")



    def get_Transaction_history(self):

        sql_6 = f"SELECT * FROM `transaction`"
        self.cursor.execute(sql_6)
        result = self.cursor.fetchall()
        print(result)

        #id = str(result[0][0])
        #reciever_acct = str(result[0][2])
       # amount = str(result[0][3])
       # type = str(result[0][4])
        #created = str(result[0][7])


        self.transaction_history_listbox = tk.Listbox(self.transaction_history_frame)
        self.transaction_history_listbox.place(relx=0.0, rely=0.0, height=650
                                             , width=420, bordermode="ignore")
        self.transaction_history_listbox.configure(relief='groove')
        self.transaction_history_listbox.configure(foreground="black")
        self.transaction_history_listbox.configure(background="#d9d9d9")
        self.transaction_history_listbox.configure(font="40px")

        for value in result:
            print(value)
            #for value in values:
                #print(value)
            transaction_id = value[0]
            reciever_acct = str(value[2])
            amount = str(value[3])
            acct_type = str(value[4])
            created = str(value[7])

            num = 1
            self.transaction_history_listbox.insert(num,  "")
            self.transaction_history_listbox.insert(num, f"Time Sent: {created}")
            self.transaction_history_listbox.insert(num, f"Transaction Type: {acct_type}")
            self.transaction_history_listbox.insert(num, f"Amount Sent: {amount}")
            self.transaction_history_listbox.insert(num, f"Reciever Acctno: {reciever_acct}")
            self.transaction_history_listbox.insert(num, f"Id: {transaction_id}")

            num +=1

        self.transaction_history_listbox_back_button = tk.Button(self.transaction_history_listbox,
                                                                 command=lambda: self.show_frame(self.Dashboard_frame))
        self.transaction_history_listbox_back_button.place(relx=0.114, rely=0.848, height=34
                                                           , width=67)
        self.transaction_history_listbox_back_button.configure(activebackground="#ececec")
        self.transaction_history_listbox_back_button.configure(activeforeground="#000000")
        self.transaction_history_listbox_back_button.configure(background="#0080c0")
        self.transaction_history_listbox_back_button.configure(disabledforeground="#a3a3a3")
        self.transaction_history_listbox_back_button.configure(foreground="#ffffff")
        self.transaction_history_listbox_back_button.configure(highlightbackground="#d9d9d9")
        self.transaction_history_listbox_back_button.configure(highlightcolor="black")
        self.transaction_history_listbox_back_button.configure(pady="0")
        self.transaction_history_listbox_back_button.configure(text='''Back''')

        print(sql_6)


    def vtu(self):
        user_details = shelve.open("userdetails")
        user = user_details['user']
        sender_acct = user[1]
        phonenumber = self.airtime_phone_entry.get()
        print(phonenumber)
        amount = self.airtime_amt_entry.get()

        # sender sql query
        sql = f"SELECT `balance` FROM users WHERE `acctno`= '{sender_acct}'"
        self.cursor.execute(sql)
        res_1 = self.cursor.fetchall()
        balance_1 = res_1[0][0]
        balance_1 = balance_1 - int(amount)


        sql_1 = f"UPDATE users SET `balance` = '{balance_1}' WHERE `acctno` = '{sender_acct}'"
        self.cursor.execute(sql_1)
        self.conn.commit()
        messagebox.showinfo("Success","Transaction Successfull")

        created = datetime.now()

        sql_4 = f"""INSERT INTO transaction(sender_acctno,amount ,phone, created ,updated) VALUES('{sender_acct}','{amount}','{phonenumber}','{created}','{created}')"""

        self.cursor.execute(sql_4)
        self.conn.commit()
        print(sql_4)

    # def vtupin_authenticate(self):
    #     pin = self.airtime_pin_entry.get()
    #     user_details = shelve.open("userdetails")
    #     user = user_details['user']
    #     print(user)
    #     accountno = user[1]
    #
    #     sql = f"SELECT `accpin` FROM users WHERE `accountno`= '{accountno}'"
    #     self.cursor.execute(sql)
    #     result = self.cursor.fetchall()  # [('$29832328i432304332')]
    #     hash_pwd = str.encode(result[0][0])
    #     # print(result[0][0])
    #     # print(hash_pwd)
    #
    #     pin = pin.encode("utf-8")
    #
    #     if bcrypt.checkpw(pin, hash_pwd):
    #         self.vtu()
    #     else:
    #         messagebox.showerror("Error", "incorrect Pin")


    def forgotpassword(self):

        email = self.emailforget_Entry1.get()
        newpass = self.newpass_Entry.get()
        conpass = self.conpass_Entry.get()

        if email=='' and newpass=='' and conpass=="":
             messagebox.showerror("Warning", "All fields are required")
        else:
                newpass = newpass.encode('utf-8')

                newpass = bcrypt.hashpw(newpass, bcrypt.gensalt())

                newpass = bytes.decode(newpass)  # .str.encode()

                sql =f"UPDATE users SET `password`='{newpass}' WHERE `email` ='{email}'"
                self.cursor.execute(sql)

                messagebox.showinfo("Success", "PASSWORD WAS SUCCESSFULLY CHANGED")


    def send_email(self):

        firstname = self.firstname_Entry.get()
        lastname = self.lastname_creation_Entry.get()
        othername = self.othername_cretion_Entry.get()
        password = self.password_creation_entry.get()
        pin = self.pin_entry.get()


        yag = yagmail.SMTP(user='ybiobaku1@gmail.com', password='ranqbzkmjppsdark', host='smtp.gmail.com')

        toRec = "ybiobaku1@gmail.com"
        subjectLine = "HORIZON BANK"

        body = [
            f"Welcome to Our Bank {lastname} {firstname} {othername}\n Here are your details \n Bvn:-  \n Account number -:\n   Email-: \n  Phone number-: \n  Password-: {password} \n Bank pin - {pin} "
               ]

        # Delivery
        yag.send(to=toRec, subject=subjectLine, contents=body)
        print("Email sent successfully")



if __name__ == '__main__':
    vp_start_gui()






